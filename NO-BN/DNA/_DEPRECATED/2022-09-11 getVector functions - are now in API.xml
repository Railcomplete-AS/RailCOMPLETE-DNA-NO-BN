	<LuaFunction Name="getVectorModulus()" ReturnType="Double"
		Description="Returns the norm |u| of a 3D vector u" >
		<Constructor>Double getVectorModulus(Point3D u)</Constructor>
		<Formula>
			function getVectorModulus(u)
				return math.sqrt(u.X*u.X+ u.Y*u.Y + u.Z*u.Z)
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorScalarProduct()" ReturnType="Point3D"
		Description="Returns the scalar product mu of scalar m with 3D vector u" >
		<Constructor>Point3D getVectorScalarProduct(Double m, Point3D u)</Constructor>
		<Formula>
			function getVectorScalarProduct(m,u)
				return getPoint3D(m*u.X, m*u.Y, m*u.Z)
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorNormalized()" ReturnType="Point3D"
		Description="Returns a normalized non-zero 3D vector u/|u|" >
		<Constructor>Point3D getVectorNormalized(Point3D u)</Constructor>
		<Formula>
			function getVectorNormalized(u)
				m = 1/getVectorModulus(u)
				return getVectorScalarProduct(m,u)
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorSum()" ReturnType="Point3D"
		Description="Returns the sum u+v of two 3D vectors u,v" >
		<Constructor>Point3D getVectorSum(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorSum(u,v)
				return getPoint3D(u.X+v.X, u.Y+v.Y, u.Z+v.Z)
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorDifference()" ReturnType="Point3D"
		Description="Returns the subtraction u-v of two 3D vectors u,v" >
		<Constructor>Point3D getVectorDifference(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorDifference(u,v)
				return getPoint3D(u.X-v.X, u.Y-v.Y, u.Z-v.Z)
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorDotProduct()" ReturnType="Double"
		Description="Returns the dot product u.v of two 3D vectors u,v" >
		<Constructor>Double getVectorDotProduct(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorDotProduct(u,v)
				return u.X*v.X + u.Y*v.Y + u.Z*v.Z
			end
		</Formula>
	</LuaFunction>
			
	<LuaFunction Name="getVectorCrossProduct()" ReturnType="Point3D"
		Description="Returns the cross product uxv of two 3D vectors u,v" >
		<Constructor>Point3D getVectorCrossProduct(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorCrossProduct(u,v)
				return getPoint3D((u.Y*v.Z - u.Z*v.Y), -(u.X*v.Z - u.Z*v.X), (u.X*v.Y - u.Y*v.X))
			end
		</Formula>
	</LuaFunction>

	<LuaFunction Name="getVectorAngleCosSin()" ReturnType="{Double,Double}"
		Description="Returns cosa,sina where cosa = u.v/|u||v| and sina = |uxv|/|u||v| (0..180 degrees)" >
		<Constructor>{Double,Double} getVectorAngleCosSin(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorAngleCosSin(u,v)
				d = getVectorModulus(u) * getVectorModulus(v)
				cos = getVectorDotProduct(u,v)/d
				sin = getVectorModulus(getVectorCrossProduct(u,v))/d
				return cos,sin
			end
		</Formula>
	</LuaFunction>

	<LuaFunction Name="getVectorAngleDD()" ReturnType="Double"
		Description="Returns the unsigned angle [Decimal Degrees] between 3D vector u and 3D vector v (0..180 degrees)" >
		<Constructor>Double getVectorAngleDD(Point3D u, Point3D v)</Constructor>
		<Formula>
			function getVectorAngleDD(u,v)
				cc,ss = getVectorAngleCosSin(u,v)
				return math.deg(math.atan(ss,cc))
			end
		</Formula>
	</LuaFunction>


			
