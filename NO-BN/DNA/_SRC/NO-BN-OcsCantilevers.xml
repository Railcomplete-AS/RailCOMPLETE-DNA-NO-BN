<!--========================================================================================================

    NO-BN-OcsCantilevers.xml
	
	Include in DNA file using XPPq XML preprocessor directive <xpp:expand href="fileName.xml" />.

	(c) Railcomplete AS, Norway, 2015-2021. All rights reserved.
	
=========================================================================================================-->
<xpp:bloc>

<!--========================================================================================================
	Contents:
	
	OVERHEAD CATENARY SYSTEM - OVERVIEW
	GLOSSARY
	CANTILEVER SUPPORT BRACKET FOR MULTIPLE CANTILEVERS
	OVERHEAD CATENARY SYSTEM CANTILEVER
	OVERHEAD CATENARY SYSTEM WIRE CLAMP
	
=========================================================================================================-->

<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM

	OVERVIEW
	--------
	ow.Z = Vertical offset from gradient curve to contact wire clamp
	ow.X = Lateral offset from gradient curve to contact wire clamp
	wc   = System height. The messenger wire clamp c is forced to be at same XY in plane coordinates.
	
	U-e = Top tube (FR:Hauban, NO:Strekkstag) - may be non-horizontal
	    = Isolator (FR:Isolateur, NO:Isolator)
	*-c = Messenger wire clamp height (NO:Bæreline-klemme høyde over strekkstag)
	*-f = Registration arm (FR:Antibalançant, NO:Direksjonsstag)
	*-w = Steady-arm (FR:Bras de rappel, NO: Lett direksjonsstag)
	111 = Diagonal tube (NO:Diagonalstag)
	222 = Cantilever tube (FR:Console, NO:Trykkstag)
	333 = Registration arm dropper (NO:?????)
	dT  = Catenary pole / support / mast (FR:Support caténaire, NO:KL-mast)

	Stagger (zigsag) (FR:Désaxement, NO:Sikk-sakk)
	The stagger depicted below is negative since w is to the left of b with respect to the tilted train axis a-b.
	
	Positive stagger (contact wire clamp and cantilever upper console on opposite sides of canted track's neutral pantograph centre)
	Negative stagger (zigsag) : Désaxement : Sikksakk towards same-as-mast side

	The drawing depicts a track with clockwise cant seen in the direction of increasing mileage (usually in a curve to the right)
				
    _T_									dT=Support mast height
    | |                (c)          	c=CatenaryWireClamp = Messenger wire clamp (NO:Bærelineklemme)
    | |U||==*=======2===*==3=e      	U=UpperConsoleTowardsMastSide
    | |	    1     2       3				Ue=Length of top tube (must reach at least to the messenger wire clamp)
    | |      1  2        3				
    | |       2         3            	
    | |     2===*======3==f				wc=SystemHeight (FR:Hauteur du fil de contact, NO:Kontakttrådhøyde)
    | |L||2      \_____             	L=LowerConsoleTowardsMastSide (FR:Console inférieur, NO:Nedre konsoll)
    | |                \ 	
    | |             :  (w)          	w=ContactWireClamp
    | |                       b     	b=ZeroStaggerNeutralContactWire = centre of pantograph at its nominal position
    | |             :        /      	
    | |                             	bw=Stagger
    | |             :      /        	ab=ContactWireHeight (measured perp to rolling plane)
    | |                              	
    | |       Theta :-- >/          	Theta=Rotation due to cant (clockwise as shown, negative Theta)
    | |                             	h=cant = difference in Z direction between left and right Top-of-Rail (ToR)
    | |             :  /            	LR to RR = cant gauge
    | |                             	LR=LeftRail top-of-rail
    | |     LR      :/              	RR=RightRail top-of-rail
    | |   h |       a               	oa=Rolling plane lift due to cant
  ===d===---+-------o-------RR------	o=The track's gradient curve
    | | 								od.X=OCS mast lateral offset (negative as shown)
   +-x-+  								od.Z=OCS mast vertical offset from its own track's gradient curve
   |   |  								x=Topside of concrete of foundation at center of foundation's shaft			
   |   |  								x is the foundation's insertion point. The bolt group extends upwards.
   |   |  								xd=OCS mast's elevation above its foundation.
 +-+   +----+							Note: The foundation and mast usually belong to the same track, but
 |          |							the cantilever will often belong to a different track. However,
 |          |							each cantilever is required to belong to the track it is serving.
 +----------+											
													
                       
Origo (marked as 'o') is defined by the XY and Z of the associated railway track, the 'gradient curve'.
The rolling plane is lifted and rotated with cant. If e.g. 150 mm clockwise cant is applied, then the
rolling plane is rotated (lifting the left rail, lowering the right rail) by an angle asin(150/1500)
and then lifted 150/2 mm along the vertical axis.
 
The contact wire clamp is held by the steady arm or held directly by the registration arm. The coordinates of the contact
wire clamp coincide with the center of the sweep of the contact wire profile (which is about 1 cm in diameter).

The contact wire clamp is placed in the "rail plane system", ie with height above the track plane (by headroom) and sideways
transfer according to the stagger (zigzag). The clamp is placed in the longitudinal direction of the track on the same 
mileage as the cantilever. The contact wire clamp connects to the cantilever through a suitable relation.
 
The cantilever's insertion point is the upper console's contact point with the track side of the mast. The mast may be
narrowing towards the top, which makes the calculation of the upper console point tricky. It is always straight upright.

The cantilever holds the value for the intended contact wire height. This contact wire height is measured perp to the 
rolling plane. The cantilever also holds the stagger (zigzag). The stagger is measured colinearly to the rolling plane.

The stagger is negative if the contact wire is held at a position resulting in contact with the pantograph's half side 
towards the catenary mast, otherwise it is positive. Note that a negative stagger is possible both with pull-on and with
push-off cantilevers, since the direction force on the wire is also a function of the preceding and the following wire
clamps in relation to the track's geometry and cant.

Formulas are provided to compute the XYZ position of the contact wire clamp and the catenary wire clamp from the track's
gradient curve and cant plus the selected contact wire height and the stagger. The two clamps (or just the wires) are
then connected to each cantilever using a suitable Lua script, the cantilevers being already chained together using the
"next/previous cantilever" relation.
 
The cantilever can suggest to place itself at the correct elevation (Z coordinate) using the position of the contact wire
clamp and the selected cantilever type's standard system height. The catenary wire clamp will usually hold the catenary 
wire at about 10 to 12 cm above the upper tube's centre. Assuming that a horizontal upper tube is desirable, this gives
us the Z coodinate of the cantilever's upper console.

At places where the contact wire is sectioned, the incoming and the outgoing contact+catenary wires must be lifted
gradually up and then led out to their tensioning devices. Two cantilevers are then placed side-by-side (ca 1.20 meter apart)
on the same cantilever support mast using an upper and a lower bracket. This forces the cantilevers' upper consoles to
be placed at the same Z coordinate, so the lifted upper tube will usually be built at an angle up fro the horizontal.

RailCOMPLETE provides two model checks for cantilevers: The first one is simply to check the selected system height
against a table of standard values. An alarm may be triggered when the system height is lowered under a bridge etc.

The second model check is the upper tube's angle with the horizontal. If the user overrides RailCOMPLETE's suggested
Z coordinate for the cantilever (the upper console centre) then the angle will not be zero.

/////// TODO: Other model checks that will be sensible to introduce for cantilevers: 

1 Minimum distance sideways to another cantilever on the same mast (and same side of mast) (they swing with temperature).

2 Maximum allowed distance from nearest anchor (midpoint anchor or untensioned end) taking wire material and temperatures
 (tunnels, outside) into consideration.

3 Stagger within allowed limits, taking the actual track geometry into consideration from the previous to the next 
  cantilever.

4 Stagger is consistent with the rules for stagger on double track (zigzagging the 'same way').

5 Stagger is consistent with the rules for stagger in changeover sections where the two wires are close.

6 The distance to the next wire clamp is within the limits of applicable wind forces

7 The absolute gradient of the contact wire compared to the track's own gradient, is within allowable limits, taking 
  maximum train speeds into consideration.

8 The gradient change from the preceding section to this section and to the next section is within allowable limits,
  taking maximum train speeds into consideration.
  
9 More "mundane" checks, that the cantilever and the related wire clamps (if any) belong to the same track. This would
  also be automated in the wire clamp object (using a Lua formula on the 'Alignment' property).

=========================================================================================================-->



<!--========================================================================================================
	GLOSSARY
	ocs - Overhead catenary System Lua formulas (including return current and earthing).
	Domain-specific Lua functions, stored in Global Extension Dictionary (not in each object).

English										Norwegian							French								German
================================			================================	================================	================================
mast										kl-mast								support_caténaire
yoke mast									åk-mast								support_portique
suspension mast								hengemast							support_suspendu
contact wire								kontakttråd	                		fil de contact
catenary wire								bæreline	                		fil porteur
stitch wire									y-line	                    		suspension en Y
droppers									hengetråd	                		pendule
current ladder								strømstige	                		
jumper										strømbru	                		
switch wires								bryterline	                		
reinforcing feeder							forsterkningsledning	    		
by-pass feeders								forbigangsledning	        		
by-pass cables								forbigangskabel	            		
feeder line									mateledning	                		
return feeder								returledning	            		
return cable								returkabel	                		
tension line								avspenningsline	            		
bracing line								avspenningsbardunline	    		
soldering line								kurvebardunline	            		
tensioning wire								loddavspenningsline	        		
insulated earth wire						isolert jordleder	        		
flexible by-pass wire						forbikoblingslisse	        		
connection cable for grounding apparatus	kabel for jordingsapparat			
connection feeders							forbindelsesleder	        		
negative feeder in AT system				negativ leder i AT-system			
positive feeder in AT system				positiv leder i AT-system			

-->


	
<!--========================================================================================================
	OVERHEAD CATENARY SYSTEM
	CANTILEVER SUPPORT BRACKET FOR MULTIPLE CANTILEVERS
=========================================================================================================-->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" Name="JBTEH_UTK Seksjonsutliggerkonsoll"
				Layer="JBTEH_UTK" Color="ByLayer"
				Group="Kontaktledning/Utliggere"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
				
		<RelationSpace>seksjonsutliggerkonsoll</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXTATTRIBUTES___HORIZONTAL_AND_MEDIUM_CLOSE___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="RC_com_SET_OCP_STATION_REFERENCE" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />

		<Variants DefaultValue="H-300" >
			<!-- The variant's number is the c-c spacing between M20 threaded irons. -->
			<!-- Note: The H-300 variant is also suitable for HEB masts up to HEB280 -->
			<Variant Name="B-120" ></Variant>
			<Variant Name="B-140" ></Variant>
			<Variant Name="B-160" ></Variant>
			<Variant Name="B-180" ></Variant>
			<Variant Name="B-200" ></Variant>
			<Variant Name="H-270" ></Variant>
			<Variant Name="H-300" ></Variant>
			<Variant Name="H-330" ></Variant>
			<Variant Name="H-360" ></Variant>
			<Variant Name="H-390" ></Variant>
		</Variants>

		<LuaExpression Name="name" ><Formula>"Utliggerkonsoll"..Variant</Formula></LuaExpression>
		<LuaExpression Name="Model3DName" ><Formula>"NO-BN-3D-EH-UTK-SEKSJONSUTLIGGERKONSOLL-1440-"..Variant</Formula></LuaExpression>

		<!-- TODO Seksjonsutliggerkonsoll skal snappe til mast, og skal selv tilby snapping for utliggere -->
		<!-- TODO Seksjonsutliggerkonsoll skal bevege seg mot sporet på funksjon av mastens tykkelse (som utliggere) -->
		<InsertPointObject VariantName="H-300" DisplayBlockName="NO-BN-2D-JBTEH_UTK-KONSOLL-FOR-SEKSJONSUTLIGGER-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="false" SnapDistance="4.0" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace> 
		</InsertPointObject>
		
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset}}
														{% else %}45.0
														{% endif %}" />	
			<BlockNameFormat JoinBy="-" >
				NO-BN-2D-JBTEH_UTK-KONSOLL-FOR-SEKSJONSUTLIGGER-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}
			</BlockNameFormat>
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" />

		<DockPointDefinitions>
			<SnapPoints>
				<SnapPoint X="0.0" Y="0.0" TargetSpace="utligger" />
			</SnapPoints>
		</DockPointDefinitions>

	</ObjectType>



<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM CANTILEVER
=========================================================================================================-->
	<LuaFunction Name="_JBTEH_UTL_StandardValues()" 
		ReturnType="Table[6*Double]"
		Description="Returns standard cantilever values table: [cwh]=contact wire height, [sh]=system height, [shmin]=min. sh, [shmax]=max. sh, [lco]=lower console offset from upper console, [wco]=contact wire clamp offset from upper console." >
		<Constructor>Table[6*Double] _JBTEH_UTL_StandardValues(String Variant)</Constructor>
		<Formula>
			function _JBTEH_UTL_StandardValues(v)
				if v == nil then v = Variant end
				variants = {"System 20A","System 20B","System 20C","System 25","System 35","Cariboni"}
				if not RC__isMemberOf(variants,v) then 
					return 0,_warning, _info("Bad cantilever Variant ["..v.."]. ")
				end
				t = {
					--Note: Siemens' catenary wire clamp is about 12 high (117mm), above the upper tube
					["System 20A"] = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50},
					["System 20B"] = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50},
					["System 20C"] = {cwh=5.30, sh=0.75, shmin=0.75, shmax=1.60, lco=-0.95, wco=-0.65},
					["System 25"] = {cwh=5.10, sh=1.80, shmin=0.70, shmax=1.80, lco=-2.05, wco=-1.70},
					["System 35"] = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50},
					["Cariboni"] = {cwh=5.05, sh=0.60, shmin=0.25, shmax=0.60, lco=0, wco=-0.70}
				}
				return t[v]
			end 
		</Formula>
	</LuaFunction>

	<LuaFunction Name="_JBTEH_UTL_ReferenceMileage()" ReturnType="Double" Description="Returns cantilever's reference mileage, based on its OCS mast's reference mileage. If more cantilevers are located on noe side of the mast, they will arbitrate positions." HideFromUser="false" >
		<Constructor>Double _JBTEH_UTL_ReferenceMileage()</Constructor>
		<Formula>
			function _JBTEH_UTL_ReferenceMileage()
				local StandardCantileverSpacing = 0.60 --60 cm separation to allow cantilevers to swing towards each other with temperature movements
				local s = "Tilhører kl-mast"
				local r,n = RC__getCollectionOfRelatedObjects(s)
				if n == 0 then
					if (Alignment == nil) then
						return 0, _info("UNFINISHED - Relate with '"..s.."' to OCS mast and assign cantilever to an aligment.")
					else
						return getPropertyValue("ReferenceMileage") == nil and 0 or getPropertyValue("ReferenceMileage"),
							_info("UNFINISHED - Relate with '"..s.."' to OCS mast.")
					end
				else
					local mast = r[0]
					local sc = "Er kl-mast for utligger"
					local cantilevers,nc = RC__getCollectionOfRelatedObjects(sc,mast)
					local me = nil --who am I?
					local i
					for i = 0, nc-1 do
						if id == cantilevers[i].id then
							me = i 
						end
					end
					if me == nil then 
						return mast.ReferenceMileage,_warning, _info("Corrupt relation '"..sc.."' to OCS mast - cannot compute cantilever position.")
					end
					--Anyone else on my side of OCS mast?
					--Note: Cantilevers on same side may serve the same track (change of OCS wire) or different tracks (in a switch)
					local d1 = getAlignmentInfo(Alignment.id,mast.geoCoord.X,
												mast.geoCoord.Y).DistanceToAlignment --distance from OCS to my cantilever's alignment
					local myLastPal = nil
					local nPals = 0
					for i = 0, nc-1 do
						if i ~= me then
							--find signed distance from mast to both cantilever's alignments - if same sign, then they are on the same side: 
							local d2 = getAlignmentInfo(getObjectFromId(cantilevers[i].id).Alignment.id,
																		mast.geoCoord.X,mast.geoCoord.Y).DistanceToAlignment
							if d1 * d2 &gt; 0 then
								--same side
								myLastPal = i
								nPals = nPals + 1
							end
						end
					end
					if nPals == 0 then
						return mast.ReferenceMileage 
					elseif nPals == 1 then
						if me &lt; myLastPal then 
							return mast.ReferenceMileage - StandardCantileverSpacing
						else
							return mast.ReferenceMileage + StandardCantileverSpacing
						end
					else 
						return mast.ReferenceMileage,_warning, _info("Too many ["..(nPals+1).."] cantilevers on same side of OCS mast.")
					end
				end
			end
		</Formula>
	</LuaFunction>

	<!-- TODO: Adjust cantilever position towards track if they should adapt to a bracket holding more cantilevers -->
	<LuaFunction Name="_JBTEH_UTL_DistanceToAlignment()" 
		ReturnType="Double"
		Description="Returns cantilever's distance to own alignment, based on its OCS mast's type and position. (2020-02-16: Formula does not take into account the angularOffset of the mast.)" >
		<Constructor>Double _JBTEH_UTL_DistanceToAlignment()</Constructor>
		<Formula>
			function _JBTEH_UTL_DistanceToAlignment()
				if (Alignment == nil) then 
					--If cantilever has no alignment, set to 4e-4 (maintain sideOfAlignment)
					return RightSided and 4e-4 or -4e-4,_warning, _info("Cantilever is not connected to a track (own alignment).")
				end
				local s = "Tilhører kl-mast"
				local r,n = RC__getCollectionOfRelatedObjects(s)
				if n == 0 then
					return RightSided and 4e-4 or -4e-4,_warning, _info("Cantilever is missing relation '"..s.."' to OCS mast.")
				else
					-- Cantilever's OCS mast does not have to be connected a track - this Lua sippet works fine without.
					local mast = r[0]
					local mv = mast.Variant
					local mp = mast.OcsMastProfile
					local d = 0.500 --default value - a bad value which is easily recognized as such
					
					if mv == "Bjelkemast" then
						d = string.sub(mp,4,6)/2000 --Assume mast profile names "HEB200", "HEB220" etc
						elseif mv == "GMB-mast" then
						d = string.sub(mp,4,6)/2000 --Assume mast profile names "HEB200", "HEB220" etc TODO: Finn ekte profiler for GMB-mast
					
					elseif mv == "H-mast" then
						d = (r[0].OcsMastHeight - RelativeElevation) * math.tan(1/50000)
			
					elseif mv == "B-mast" then
						d = (r[0].OcsMastHeight - RelativeElevation) * math.tan(23/1000000) --mast is not straight!
					
					elseif mv == "Betongmast" then
						d = 0.13
						elseif mv == "Tremast" then
						d = 0.13
						elseif mv == "Hengemast for bru og tunnel" then
						if (mp == 'Sirkulær, Ø120') then 
							d = 0.06
						elseif (mp == 'Rektangulær, 100x150') then
							d = 0.075
						elseif (mp == 'Rektangulær, 100x200') then 
							d = 0.10
						else
							return 0,_warning, _info("Bad OCS mast profile ["..mp.."].")
						end
					
					elseif mv == "Hengemast i åk type 12" or mv == "Hengemast i åk type 14" or mv == "Hengemast i åk type 40" then
						if (mp == 'Kvadratisk, 100x100') then 
							d = 0.05
						elseif (mp == 'Rektangulær, 100x150') then 
							d = 0.075
						end
					
					elseif mv == "Hengemast Cariboni" then
						if (mp == 'Rektangulær, 100x150') then 
							d = 0.075
						end
					
					else 
						return 0,_warning, _info("Bad OCS mast variant ["..mv.."].")
					end
					-- OCS mast and cantilever may belong to different tracks (when OCS mast is located between tracks):
					mdist = getAlignmentInfo(alignment.id,
							mast.geoCoord.X,mast.geoCoord.Y).DistanceToAlignment --Distance from center OCS mast to *cantilever's* alignment
					if mdist &gt; 0 then 
						return mdist - d
					else
						return mdist + d
					end
				end
			end
		</Formula>
	</LuaFunction>

	<LuaFunction Name="_JBTEH_UTL_Model3DName()" 
		ReturnType="String"
		Description="Returns cantilever's 3D model name, based on its OCS mast's type, push/pull setting and cantilever's length [mm]." >
		<Constructor>String _JBTEH_UTL_Model3DName(int CantileverLengthDisplay)</Constructor>
		<Formula>
		-- sett denne på vent, bare returner de som finnes.
			function _JBTEH_UTL_Model3DName(CantileverLengthDisplay)
				--if CantileverLength == nil then 
				--	--Default length is 4.0m:
				--	CantileverLengthDisplay = "4000" 
				--end
				--TODO: Lage flere 3D-modeller for alle utligger-varianter.
				--TODO: ...men siden 20, 25 og 35 er veldig like, så bruker vi S20 som 3D-modell for alle sammen inntil videre.
				--if (Variant == "System 20A") then 
				--	if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
				--	elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
				--	else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
				--	end
				--elseif (Variant == "System 20B") then 
				--	if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
				--	elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
				--	else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
				--	end
				--elseif (Variant == "System 20C") then 
				--	if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
				--	elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
				--	else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
				--	end
				--elseif (Variant == "System 25") then 
				--	if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
				--	elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
				--	else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
				--	end
				--elseif (Variant == 'System 35') then
				--	if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
				--	elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
				--	else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
				--	end
				--elseif (Variant == "Cariboni") then
				--	return "NO-BN-3D-EH-UTL-UTLIGGER-CARIBONI"
				--else
				--	return "Ukjent Variant ["..Variant.."].",_warning
				--end
				if (Variant == "Cariboni") then
					return "NO-BN-3D-EH-UTL-UTLIGGER-CARIBONI"
				end
				if(PushDirection == "Push") then
					return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-L3706-V1690-SH1768"
				elseif (PushDirection == "Pull") then
					return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-L2895-V1693-SH1776"
				else
					return "Ukjent variant ["..Variant.."] eller kraftretning ["..PushDirection.."]", _warning
				end
			end
		</Formula>
	</LuaFunction>

	<LuaFunction Name="_JBTEH_UTL_AddVisual2dAngularOffset()" 
		ReturnType="Double"
		Description="Adds 17 Decimal Degrees rotation to the cantilever's angle in 2D whenever it is located in a yoke or in a galley, to make it visible in 2D drawings. AngularOffset and 3D rendering are not affected" >
		<Constructor>Double _JBTEH_UTL_AddVisual2dAngularOffset()</Constructor>
		<Formula>
			function _JBTEH_UTL_AddVisual2dAngularOffset()
				s = "Tilhører kl-mast"
				r,n = RC__getCollectionOfRelatedObjects(s)
				if n == 0 then
					return 0, _info("UNFINISHED - Relate cantilever to an OCS mast, yoke suspension mast or tunnel / bridge suspension mast.")
				else 
					--Cantilever mounted under yoke?
					--Make cantilever "rod" visible if located under a yoke, by visually adding 17 degrees:
					m = r[0]
					s1 = "Er åk-mast for åk"
					r1,n1 = RC__getCollectionOfRelatedObjects(s1)
					if n1 == 0 then 
						return 0, _info("No visual angular offset added since cantilever is not hidden under a yoke.")
					else
						-- TODO: Detect if cantilever is located on the other side of one of the yoke's support masts - and not under the next yoke, if another yoke continues...
						return 17, _info("Visual angular offset added since cantilever might otherwise be visually hidden under a nearby yoke.")
					end
				end
			end
		</Formula>
	</LuaFunction>

	<!-- Ref. Bane NOR Teknisk Regelverk, Kontaktledning/Prosjektering og Bygging/Mekanisk utforming -->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" Name="JBTEH_UTL Utligger"
				Layer="JBTEH_UTL" Color="ByLayer"
				Group="Kontaktledning/Utliggere"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
			
		<RelationSpace>utligger</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_SYMBOLFRAME" />
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXTATTRIBUTES___VERTICAL_AND_MEDIUM_FAR___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="RC_com_SET_OCP_STATION_REFERENCE" />

		<!-- Use custom version of wayside general object Lua functions (due to the possible angular offset): -->
		<!-- <xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" /> -->

		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA_EH_UTL" />

		<Variants DefaultValue="System 20A" >
			<Variant Name="System 20A" > 
				<!-- Open line, 200 km/h -->
				<SetValue Key="SubVariant" Value="Standard" />
			</Variant>
			<Variant Name="System 20B" >
				<!-- Reduced speed 160 km/h, shorter spanlength / lower system height -->
				<SetValue Key="SubVariant" Value="Standard" />
			</Variant>
			<Variant Name="System 20C" >
				<!-- Tunnel, 200 km/h, shorter span lengths / lower system height -->
				<SetValue Key="SubVariant" Value="C1" />
			</Variant>
			<Variant Name="System 25" >
				<!-- 250 km/h -->
				<SetValue Key="SubVariant" Value="N/A" />
			</Variant>
			<Variant Name="System 35" >
				<!-- Old OCS for existing lines -->
				<SetValue Key="SubVariant" Value="N/A" />
			</Variant>
			<Variant Name="Cariboni" >
				<!-- Tunnels -->
				<SetValue Key="SubVariant" Value="N/A" />
				<SetValue Key="PushDirection" Value="N/A" />
			</Variant>
		</Variants>
		
		<!-- PushDirection is only set at creation time. Subsequent changing of Variant will not change push/pull directions. -->
		<SetValue Key="PushDirection" Value="Pull" />

		<CustomAttribute DataType="Enumeration" Name="SubVariant" DisplayName="SubVariant" 
			Description=
			"The cantilever subvariant [Standard | Reduced] is 'Standard' when built for its line design speed, and 'Reduced' when built for less tense wires and lesser speeds." >
			<Values Variant="System 20A" >
				<Value DisplayName="Standard" Description="Standard tension wire" >Standard</Value>
				<Value DisplayName="Redusert" Description="Reduced tension wire" >Reduced</Value>
			</Values>
			<Values Variant="System 20B" >
				<Value DisplayName="Standard" Description="Standard tension wire" >Standard</Value>
				<Value DisplayName="Redusert" Description="Reduced tension wire" >Reduced</Value>
			</Values>
			<Values Variant="System 20C" >
				<Value>C1</Value>
				<Value>C2</Value>
			</Values>
			<Values Variant="System 25" >
				<Value>N/A</Value>
			</Values>
			<Values Variant="System 35" >
				<Value>N/A</Value>
			</Values>
			<Values Variant="Cariboni" >
				<Value>N/A</Value>
			</Values>
		</CustomAttribute>

		<CustomAttribute DataType="Enumeration" Name="PushDirection" DisplayName="Kraftretning" DefaultValue="Pull"
			Description=
			"The cantilever push direction (cpd) [Push | Pull] is denoted 'Pull' if the cantilever pulls the contact wire towards the cantilever console(s), and 'Push' if it pushes it away." >
			<Values Variant="System 20A" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is streched (pulling the wire towards the mast)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the mast)" >Push</Value> -->
			</Values>
			<Values Variant="System 20B" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is streched (pulling the wire towards the mast)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the mast)" >Push</Value> -->
			</Values>
			<Values Variant="System 20C" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is streched (pulling the wire towards the mast)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the mast)" >Push</Value> -->
			</Values>
			<Values Variant="System 25" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is streched (pulling the wire towards the mast)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the mast)" >Push</Value> -->
			</Values>
			<Values Variant="System 35" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is streched (pulling the wire towards the mast)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the mast)" >Push</Value> -->
			</Values>
			<Values Variant="Cariboni" >
				<Value>N/A</Value>
			</Values>
		</CustomAttribute>
		
		<LuaExpression Name="dir" ><Formula>"both"</Formula></LuaExpression>

		<LuaExpression Name="code" ><Formula>_JBTEH_UTL_code()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_code()" 
			ReturnType="String"
			Description="Obtains the 'code' for this OCS cantilever. Uses relation 'Tilhører kl-mast' to access the related object's data." >
			<Constructor>String _JBTEH_UTL_code()</Constructor>
			<Formula>
				function _JBTEH_UTL_code()
					s = "Tilhører kl-mast"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its OCS mast."
					else
						s1 = "Er kl-mast for utligger"
						r1,n1 = RC__getCollectionOfRelatedObjects(s1,r[0])
						if n1 == 1 then
							return r[0].code --copy the mast's code
						else
							total = 0
							totalRightSided = 0 --cantilevers placed to the right of its own alignment, regardless of what alignment the OCS mast has
							for i = 0,n1-1 do
								total = total + 1
								if r1[i].SideOfAlignment == "Right" then
									totalRightSided = totalRightSided + 1
								end
							end
							indx = 1
							for i = 0,n1-1 do
								other = r1[i]
								if (this.id ~= other.id) and (this.SideOfAlignment == other.SideOfAlignment) then
									if this.ReferenceMileage &gt; other.ReferenceMileage then
										indx = indx + 1
									end
								end
							end
							if total == 1 then
								return r[0].code
							else
								if this.SideOfAlignment == "Right" then
									--Cantilever extends to the left towards its track, use index 1 or 1,2:
									return r[0].code.."-"..indx
								else
									--Cantilever extends to the right towards its track, use index n+1 or n+1,n+2 (n=#left-pointing cantilevers)
									return r[0].code.."-"..(totalRightSided + indx)
								end
							end
						end
					end
				end
			</Formula>
		</LuaFunction>
		
		<CustomAttribute DataType="Double" Name="CantileverLength" DisplayName="Utliggerlengde" DefaultValue="4.0"
			Description="The cantilever's length [m] is measured from console (mast side) to contact wire clamp, perpendicularly to the track. The Cariboni variant has a constant length of 1200 mm." >
		</CustomAttribute>
		
		<LuaExpression Name="CantileverLength" ><Formula>_JBTEH_UTL_CantileverLength()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CantileverLength()" 
			ReturnType="String"
			Description="Returns the cantilever's length, adjusted for OCS mast placement and mast profile, mast's side of track, stagger and local cant. Cariboni is always 1200 mm long." >
			<Constructor>Double _JBTEH_UTL_CantileverLength(Double CantileverLength)</Constructor>
						<!-- --2022-02-24 CLFEY Deprecated code, 2D symbol length shall not adapt to actual cant effects: -->
						<!-- local c,cr,cg,cl -->
						<!-- c = getAlignmentInfo().Cant/1000 -->
						<!-- c = RC__isNan(c) and 0 or c -->
						<!-- cr = getAlignmentInfo().CantRotation or "CW" -->
						<!-- cg = Alignment.AlignmentSystem.CantGauge -->
						<!-- cl = math.abs(DistanceToAlignment) + Stagger -->
							<!-- + (cr == "CCW" and 1 or -1) * (RightSided and 1 or -1) * ContactWireHeight * c/cg -->
			<Formula>
				function _JBTEH_UTL_CantileverLength()
					if Variant == "Cariboni" then
						return 1.200
					else
						cl = math.abs(DistanceToAlignment) + Stagger
						return string.format("%.03f",cl)
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="PushDirection" ><Formula>_JBTEH_UTL_PushDirection()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_PushDirection()" 
			ReturnType="String"
			Description="Returns the cantilever's push/pull direction, deduced from the contact wire's angular change at this cantilever." >
			<Constructor>String _JBTEH_UTL_PushDirection()</Constructor>
			<Formula>
				function _JBTEH_UTL_PushDirection()
					--[[
						Find the net force acting on a cantilever, return Push or Pull accordingly.
						p0 = previous cantilever's contact wire clamp (or the inital wire tension balancer)
						p1 = this cantilever
						p2 = next cantilever's contact wire clamp (or the termination in a wire tension balancer)
						p3 = contact wire clamp
						u = vector from p1 to p0
						v = vector from p1 to p2
						w = vector from p1 to p3
								(3)
								|
								|
						(0)-----(1)-----(2)

						uu,vv,ww are previous/this/subsequent consecutive cantilever insertion points (or WTB)
						u,v,w are their contact wire clamps.
						All coordinates are in WCS.
					--]]
				
					s0 = "Forrige utligger/avspenning"
					r0,n0 = RC__getCollectionOfRelatedObjects(s0)
					if n0 == 0 then
						return Stagger &lt; 0 and "Pull" or "Push", _info("UNFINISHED - No item related with '"..s0.."'.")
					else
						prevItem = r0[0]
						uu = getPoint3D(prevItem.geoCoord.X, prevItem.geoCoord.Y)
						if prevItem.RcType == "JBTEH_AEH Avspenning" then
							u = uu
						else
							--Add vector from insertion point to contact wire clamp, in WCS coordinates:
							t = getAlignmentInfo(prevItem.Alignment.id,uu).Tangent --local track tangent vector t.XYZ
							tg = math.atan(t.Y,t.X)
							wcPrev = getPoint3D(RC__acsVector2wcsVector(prevItem.WireClampLateralOffset-prevItem.DistanceToAlignment,0,tg))
							u = RC__vectorAdd(uu,wcPrev)
						end
					end
					
					--This cantilever:
					vv = getPoint3D(this.geoCoord.X, this.geoCoord.Y)
					--Add vector from insertion point to contact wire clamp, in WCS coordinates:
					t = getAlignmentInfo(this.Alignment.id,vv).Tangent --local track tangent vector t.XYZ
					tg = math.atan(t.Y,t.X)
					cantileverVector = getPoint3D(RC__acsVector2wcsVector(this.WireClampLateralOffset-this.DistanceToAlignment,0,tg))
					v = RC__vectorAdd(vv,cantileverVector)
					
					s2 = "Neste utligger/avspenning"
					r2,n2 = RC__getCollectionOfRelatedObjects(s2)
					if n2 == 0 then
						return Stagger &lt; 0 and "Pull" or "Push", _info("UNFINISHED - No item related with '"..s2.."'.")
					else
						nextItem = r2[0]
						ww = getPoint3D(nextItem.geoCoord.X, nextItem.geoCoord.Y)
						if nextItem.RcType == "JBTEH_AEH Avspenning" then
							w = ww
						else
							t = getAlignmentInfo(nextItem.Alignment.id,ww).Tangent --local track tangent vector t.XYZ
							tg = math.atan(t.Y,t.X)
							wcNext = getPoint3D(RC__acsVector2wcsVector(nextItem.WireClampLateralOffset-nextItem.DistanceToAlignment,0,tg))
							w = RC__vectorAdd(ww,wcNext)
						end
					end
				
					toPrev = RC__vectorSubtract(u,v)
					toNext = RC__vectorSubtract(w,v)
					forceVector = RC__vectorAdd(toPrev,toNext)
					dotProduct = RC__vectorDotProduct(forceVector,cantileverVector)
					--if true then return toPrev,toNext,forceVector,cantileverVector,dotProduct  end
				
					t = "Push/Pull direction deduced from previous cantilever/WTB '"..RC__identify(r0[0])
						.."', this cantilever '"..RC__identify(this).."' and next cantilever/WTB '"..RC__identify(r2[0]).."'."
				
					return RC__vectorDotProduct(forceVector,cantileverVector) &lt; 0 and "Push" or "Pull",_info(t)
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Int32" Name="CantileverLengthDisplay" DisplayName="Utliggerlengde visning" DefaultValue="4000"
			Description="The cantilever's display length [mm] [1000..6000], rounded to closest multiple of 100 mm. Cariboni is always 1200 mm long." >
		</CustomAttribute>
		<LuaExpression Name="CantileverLengthDisplay" ><Formula>_JBTEH_UTL_CantileverLengthDisplay(CantileverLength)</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CantileverLengthDisplay()" 
			ReturnType="String"
			Description="Returns the cantilever's display length, min 1000mm, max 6000mm, rounded to nearest multiple of 100mm. Cariboni is always 1200 mm long." >
			<Constructor>Int _JBTEH_UTL_CantileverLengthDisplay(Double CantileverLength)</Constructor>
			<Formula>
				function _JBTEH_UTL_CantileverLengthDisplay(CantileverLength)
					if Variant == "Cariboni" then
						return "1200"
					else
						step = 100 --mm - To be verified with the 2D library file
						minL = 1000 --mm
						maxL = 6000 --mm
						local L = step * ((1000*CantileverLength + step/2)//step)
						if L &lt; minL then 
							return minL
						elseif L &gt; maxL then 
							return maxL
						else 
							return RC__toint(L)
						end
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="ContactWireHeight" DisplayName="Kontakttrådhøyde" DefaultValue="5.00" 
			Description="The contact wire height (cwh) [m] denotes the orthogonal distance from the rolling plane formed by the top-of-rails to the contact wire clamp." />
		<LuaExpression Name="ContactWireHeight" ><Formula>_JBTEH_UTL_StandardValues(Variant)["cwh"]</Formula></LuaExpression>

		<CustomAttribute DataType="Double" Name="SystemHeight" DisplayName="Systemhøyde" DefaultValue="1.00" 
			Description="The cantilever system height (sh) [m] denotes the vertical Z coordinate difference from the contact wire clamp to the catenary clamp." />
		<LuaExpression Name="SystemHeight" ><Formula>_JBTEH_UTL_StandardValues(Variant)["sh"]</Formula></LuaExpression>

		<CustomAttribute DataType="Double" Name="StitchWireLength" DisplayName="Y-line lengde" DefaultValue="0.00" 
			Description="The stitch wire length (swl) [m] denotes the length, measured as a difference in mileage, from start to end (where it attaches to the catenary wire). Zero length means 'no stitch wire'." />

        <CustomAttribute DataType="Double" Name="Stagger" DisplayName="Sikk-sakk" DefaultValue="0.000"
			Description="Stagger [m] (zigzag) denotes the distance from contact wire clamp to centre track, measured co-linearly with the top-of-rail plane. A positive stagger means pushing away from mast, negative means pulling towards mast." />
		
		<CustomAttribute DataType="String" Name="StaggerDisplay" DisplayName="Sikk-sakk visning" DefaultValue="" 
			Description="The stagger value, as shown next to the cantilever [cm]." />
		<TextAttribute Annotative="true" BindingProperty="StaggerDisplay" CadAttributeTag="SIKKSAKK" X="-2.75" Y="-6" 
			Layer="JBTEH@SIKKSAKK" Justify="MiddleCenter" Height="1.25" Width="0" Rotation="0"
			ObliqueAngle="0" Constant="false" Invisible="false" Lock="false" MText="false" />       
		<LuaExpression Name="StaggerDisplay" ><Formula>string.format("%.f",Stagger*100) --Centimeters</Formula></LuaExpression>
		
		<CustomAttribute DataType="String" Name="OcsWireNameDisplay" DisplayName="Ledningsnavn visning" DefaultValue="" 
			Description="The cantilever's associated OCS wire." />
        <TextAttribute Annotative="true" BindingProperty="OcsWireNameDisplay" CadAttributeTag="UTLIGGER_LEDNING" X="0" Y="-6" 
				Layer="JBTEH@UTL_LEDNING" Justify="MiddleCenter" Height="0.9" Width="0" Rotation="-90" ObliqueAngle="0" Constant="false" 
				Invisible="false" Lock="false" MText="false" /> 
		<LuaExpression Name="OcsWireNameDisplay" ><Formula>_JBTEH_UTL_OcsWireNameDisplay()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_OcsWireNameDisplay()" 
			ReturnType="String"
			Description="Identifies this cantilever's associated OCS wire. Uses relation 'Tilhører kl-mast' to access the related object's data." >
			<Constructor>String _JBTEH_UTL_OcsWireNameDisplay(cantilever)</Constructor>
			<Formula>
				function _JBTEH_UTL_OcsWireNameDisplay(cantilever)
					if cantilever == nil then cantilever = this end
					if cantilever.RcType ~= "JBTEH_UTL Utligger" then
						return nil, _info("Unrecognised calling object type ["..cantilever.RcType.."].")
					end
					s = "Er utligger for kontaktledning"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 1 then return 
						RC__identify(r[0])
					else
						return "CW=?"
					end		
				end
			</Formula>
		</LuaFunction>
		
		<CustomAttribute DataType="Double" Name="WireClampLateralOffset" DisplayName="Kontakttråd sideavsett" DefaultValue="0.00" 
			Description="The contact wire clamp's lateral offset (wclo) [m] denotes the horizontal distance from the track's gradient curve (XYZ before cant effects) to the contact wire clamp (center of contact wire). It depends on contact wire height, stagger (zigzag) and track cant." />
		<LuaExpression Name="WireClampLateralOffset" ><Formula>_JBTEH_UTL_WireClampLateralOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_WireClampLateralOffset()" 
			ReturnType="String"
			Description="Returns the horizontal offset from the track's gradient curve (before cant) to the cantilever's associated OCS wire, taking contact wire height, stagger and track cant into consideration." >
			<Constructor>String _JBTEH_UTL_WireClampLateralOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_WireClampLateralOffset()
					--TODO: Adapt function to dual cant.
					ai = getAlignmentInfo()
					c = ai.Cant
					h = RC__isNan(c) and 0 or c/1000.0
					signedStagger = (SideOfAlignment == "Right" and -Stagger or Stagger)
					if h == 0 then
						--no cant:
						return signedStagger
					else
						ss = h/Alignment.AlignmentSystem.CantGauge
						cc = math.sqrt(1 - ss^2)
						if ai.CantRotation == "CW" then 
							return ss*ContactWireHeight + cc*signedStagger
						elseif ai.CantRotation == "CCW" then
							return -ss*ContactWireHeight + cc*signedStagger
						else
							return _error,0.999
						end
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="WireClampVerticalOffset" DisplayName="Kontakttråd høydeavsett" DefaultValue="0.00" 
			Description="The contact wire clamp's vertical offset (wcvo) [m] denotes the vertical distance from the track's gradient curve (XYZ before cant effects) to the contact wire clamp (center of contact wire). It depends on contact wire height, stagger (zigzag), cant and the cantilever being LeftSided or RightSided." />
		<LuaExpression Name="WireClampVerticalOffset" ><Formula>_JBTEH_UTL_WireClampVerticalOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_WireClampVerticalOffset()" 
			ReturnType="String"
			Description="Returns the vertical offset from the track's gradient curve (before cant) to the cantilever's associated OCS wire, taking contact wire height, stagger, track cant and cantilever side-of-track into consideration." >
			<Constructor>String _JBTEH_UTL_WireClampVerticalOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_WireClampVerticalOffset()
					--TODO: Adapt function to dual cant.
					ai = getAlignmentInfo()
					c = ai.Cant
					h = RC__isNan(c) and 0 or c/1000.0
					if h == 0 then 
						return ContactWireHeight
					else
						ss = h/Alignment.AlignmentSystem.CantGauge
						cc = math.sqrt(1 - ss^2)
						if ai.CantRotation == "CW" then 
							return h/2 + cc*ContactWireHeight - ss*Stagger
						elseif ai.CantRotation == "CCW" then
							return h/2 + cc*ContactWireHeight + ss*Stagger
						else
							return _error,0.999
						end
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CatenaryClampLateralOffset" DisplayName="Bæreline sideavsett" DefaultValue="0.00" 
			Description="The catenary clamp's lateral offset (cclo) [m] denotes the horizontal distance from the track's gradient curve (XYZ before cant effects) to the catenary clamp (center of catenary wire). We assume that it is situated at the system height, straight above the contact wire clamp." />
		<LuaExpression Name="CatenaryClampLateralOffset" ><Formula>_JBTEH_UTL_CatenaryClampLateralOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CatenaryClampLateralOffset()" 
			ReturnType="String"
			Description="Returns the horizontal offset from the track's gradient curve (before cant) to the cantilever's associated OCS catenary wire, assuming that it is situated at the system height, straight above the contact wire clamp." >
			<Constructor>String _JBTEH_UTL_CatenaryClampLateralOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_CatenaryClampLateralOffset()
					--Assume that the catenary/contact wire is a vertical wire suspension system, also for curves with large cant
					return WireClampLateralOffset
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CatenaryClampVerticalOffset" DisplayName="Bæreline høydeavsett" DefaultValue="0.00" 
			Description="The catenary clamp's vertical offset (ccvo) [m] denotes denotes the vertical distance from the track's gradient curve (XYZ before cant effects) to the catenary wire clamp (center of catenary wire). We assume that it is situated at the system height, straight above the contact wire clamp." />
		<LuaExpression Name="CatenaryClampVerticalOffset" ><Formula>_JBTEH_UTL_CatenaryClampVerticalOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CatenaryClampVerticalOffset()" 
			ReturnType="String"
			Description="Returns the vertical offset from the track's gradient curve (before cant) to the cantilever's associated OCS catenary wire, assuming that it is situated at the system height, straight above the contact wire clamp." >
			<Constructor>String _JBTEH_UTL_CatenaryClampVerticalOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_CatenaryClampVerticalOffset()
					--Assume that the catenary/contact wire is a vertical wire suspension system, also for curves with large cant
					return WireClampVerticalOffset + SystemHeight
				end
			</Formula>
		</LuaFunction>

		<!-- <LuaExpression Name="name" ><Formula>code</Formula></LuaExpression> -->
		<LuaExpression Name="ReferenceMileage" ><Formula>_JBTEH_UTL_ReferenceMileage()</Formula></LuaExpression>
		<LuaExpression Name="DistanceToAlignment" ><Formula>_JBTEH_UTL_DistanceToAlignment()</Formula></LuaExpression>
		<LuaExpression Name="RelativeElevation" ><Formula>ContactWireHeight - _JBTEH_UTL_StandardValues(Variant)["wco"]</Formula></LuaExpression>

		<CustomAttribute DataType="Double" Name="AddVisual2dAngularOffset" DisplayName="2D vinkeltillegg" DefaultValue="0" 
			Description="The 'AddVisual2dAngularOffset' [Double] adds 16.7 decimal degrees to the 2D symbol's angle. Cantilevers mounted in a yoke or galley will not be visible unless the 2D symbol is given an extra angle." />
		<LuaExpression Name="AddVisual2dAngularOffset" ><Formula>_JBTEH_UTL_AddVisual2dAngularOffset()</Formula></LuaExpression>

		<!-- 3D rendering -->
		<LuaExpression Name="Model3DName" ><Formula>_JBTEH_UTL_Model3DName(CantileverLengthDisplay)</Formula></LuaExpression>
		<!-- Note: The argument "0" to ..._trk_getYawFromDir(0) forces RC to use 0 angular offset instead of something else for cantilevers in yokes -->
		<LuaExpression Name="Rotation3D.Z" ><Formula>NOBN_trk_getYawFromDir(0.0)</Formula></LuaExpression>

		<!-- Model checks -->
		<CustomAttribute DataType="String" Name="mc_OcsSystemHeight" DisplayName="System Height" 
			ReadOnly="true" Category="Model check" 
			Description="Check that cantilever system height (sh) [m] conforms to Technical Regulations for the chosen Variant / SubVariant."
		 />
		<LuaExpression Name="mc_OcsSystemHeight" IsModelCheck="true" ><Formula>_JBTEH_UTL_chkSystemHeight()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_chkSystemHeight()" 
			ReturnType="String"
			Description="Checks the cantilever's height as a function of selected OCS system variant's min and max heights." >
			<Constructor>String _JBTEH_UTL_chkSystemHeight()</Constructor>
			<Formula>
				function _JBTEH_UTL_chkSystemHeight()
					min = _JBTEH_UTL_StandardValues(Variant)["shmin"]
					max = _JBTEH_UTL_StandardValues(Variant)["shmax"]
					sh = SystemHeight
					v = Variant
					if sh &lt; min then
						return string.format("%.02f: WARNING - system height is below %s limit (%.02f).",sh,v,min),_warning
					elseif sh &gt; max then
						return string.format("%.02f: WARNING - system height is above %s limit (%.02f).",sh,v,max),_warning
					else
						return string.format("%.02f: OK - system height is within %s limits [%.02f-%0.2f].",sh,v,min,max),_ok
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="String" Name="mc_OcsUpperTubeAngle" DisplayName="Strekkstagvinkel" 
			ReadOnly="true" Category="Model check" 
			Description="The cantilever upper tube's angle [DD] above the horizontal position. We assume that the catenary wire clamp is situated 11 cm above the center of the upper tube."
		 />
		<LuaExpression Name="mc_OcsUpperTubeAngle" IsModelCheck="true" ><Formula>_JBTEH_UTL_chkUpperTubeAngle()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_chkUpperTubeAngle()" 
			ReturnType="String"
			Description="Checks that the cantilever upper tube's angle [DD] is near zero (except for the lifted wire at wire changeovers). We assume that the catenary wire clamp is situated 11 cm above the center of the upper tube." >
			<Constructor>String _JBTEH_UTL_chkUpperTubeAngle()</Constructor>
			<Formula>
				function _JBTEH_UTL_chkUpperTubeAngle()
					-- Assume that the catenary wire clamp holds the catenary 11.7 cm above the upper tube's center:
					vDiff = CatenaryClampVerticalOffset - 0.117 - RelativeElevation
					hDiff = math.abs(CatenaryClampLateralOffset - DistanceToAlignment)
					angle = math.deg(math.atan(vDiff,hDiff))
					min = -5.0 --Decimal Degrees
					max = 5.0 --Decimal Degrees
					if angle &lt; min then
						return string.format("%.01f: WARNING - upper tube angle is below low limit (%.01f DD).",angle,min),_warning
					elseif angle &gt; max then
						return string.format("%.01f: WARNING - upper tube angle is above high limit (%.01f DD).",angle,max),_warning
					else
						return string.format("%.01f: OK - system height is within limits [%.01f  to %0.1f DD].",angle,min,max),_ok
					end
				end
			</Formula>
		</LuaFunction>
		
		<CustomAttribute DataType="Double" Name="SpanLength" DisplayName="Spennlengde" DefaultValue="0.0" 
			Description="The span length (sl) [m] denotes the 2D straight line distance (projected onto the XY plane) from this cantilever's contact wire clamp to the next, related using 'Neste utligger/avspenning'/'Forrige utligger/avspenning'." />
		<LuaExpression Name="SpanLength" ><Formula>_JBTEH_UTL_SpanLength()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_SpanLength()" ReturnType="Double" 
			HideFromUser="false"
			Description="Returns the shortest span length [m] between this cantilever's wire clamp and its related next cantilever's wire clamp." >
		<Constructor>Double _JBTEH_UTL_SpanLength()</Constructor>
		<Formula>
			function _JBTEH_UTL_spanLength()
				--This cantilever:
				vv = getPoint3D(this.geoCoord.X, this.geoCoord.Y)
				--Add vector from insertion point to contact wire clamp, in WCS coordinates:
				t = getAlignmentInfo(this.Alignment.id,vv).Tangent --local track tangent vector t.XYZ
				tg = math.atan(t.Y,t.X)
				cantileverVector = getPoint3D(RC__acsVector2wcsVector(this.WireClampLateralOffset-this.DistanceToAlignment,0,tg))
				v = RC__vectorAdd(vv,cantileverVector)
				
				--Next cantilever:
				s = "Neste utligger/avspenning"
				r,n = RC__getCollectionOfRelatedObjects(s)
				if n == 0 then
					return 0.0, _info("UNFINISHED - Relate with '"..s.."' to next OCS cantilever, otherwise span length cannot be computed.")
				else
					nextItem = r[0]
					ww = getPoint3D(nextItem.geoCoord.X, nextItem.geoCoord.Y)
					if nextItem.RcType == "JBTEH_AEH Avspenning" then
						w = ww
					else
						t = getAlignmentInfo(nextItem.Alignment.id,ww).Tangent --local track tangent vector t.XYZ
						tg = math.atan(t.Y,t.X)
						wcNext = getPoint3D(RC__acsVector2wcsVector(nextItem.WireClampLateralOffset-nextItem.DistanceToAlignment,0,tg))
						w = RC__vectorAdd(ww,wcNext)
					end
			
					d = RC__vectorNorm(RC__vectorSubtract(w,v)) --2D length
					return string.format("%.03f",d), _info("Spanlength deduced as distance between "..RC__identify(this).." and "..RC__identify(nextItem).." measured in center track.")
				end
			end
		</Formula>
	</LuaFunction>
		

		<!-- Extra functions, for use when the wire clamps have been provided based on survey data. -->
		<!-- Use these functions to compute contact wire height and stagger "backwards". -->
		<LuaFunction Name="_JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()" 
			ReturnType="String"
			Description="Returns the Contact Wire Height (measured perpendicularly above the rolling plane), computed from a surveyed contact wire clamp related with 'Har kontakttrådklemme'." >
			<Constructor>String _JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()</Constructor>
			<Formula>
				function _JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()
					s = "Har kontakttrådklemme"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						p = r[0].geoCoord --CW clamp coordinates in WCS
						ai = getAlignmentInfo(p.X,p.Y) --Project CW clamp onto the cantilever's alignment
						h = (ai.Cant or 0) / 1000.0 --[m] Could be nil
						H = p.Z - (ai.Point.Z + h/2) --survey point Z relative to this track's center track after cant
						d = ai.DistanceToAlignment
						ss = h / Alignment.AlignmentSystem.CantGauge -- equals the sine of the cant angle
						ss = ss * (ai.CantRotation == "CW" and 1 or -1)
						cc = math.sqrt(1 - ss^2) --the cosine
						cwh = ss*d + cc*H
						return cwh --Intended for the ContactWireHeight property
					end
				end
			</Formula>
		</LuaFunction>

		<LuaFunction Name="_JBTEH_UTL_getStaggerFromRelatedContactWireClamp()" 
			ReturnType="String"
			Description="Returns the Stagger (measured colinearly to the rolling plane), computed from a surveyed contact wire clamp related with 'Har kontakttrådklemme'." >
			<Constructor>String _JBTEH_UTL_getStaggerFromRelatedContactWireClamp()</Constructor>
			<Formula>
				function _JBTEH_UTL_getStaggerFromRelatedContactWireClamp()
					s = "Har kontakttrådklemme"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "INCOMPLET - Relier par '"..s.."' à son armement."
						--return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						p = r[0].geoCoord --CW clamp coordinates in WCS
						ai = getAlignmentInfo(p.X,p.Y) --Project CW clamp onto the cantilever's alignment
						h = (ai.Cant or 0) / 1000.0 --[m] Could be nil
						H = p.Z - (ai.Point.Z + h/2) --survey point Z relative to this track's center track after cant
						d = ai.DistanceToAlignment
						ss = h / Alignment.AlignmentSystem.CantGauge -- equals the sine of the cant angle
						cc = math.sqrt(1 - ss^2) --the cosine
						zigzag = (ss*H - cc*d) * (RightSided and 1 or -1)
						return zigzag --Intended for the Stagger property
					end
				end
			</Formula>
		</LuaFunction>

		<InsertPointObject VariantName="System 20A" DisplayName="System 20A" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20A-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="System 20B" DisplayName="System 20B" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20B-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="System 20C" DisplayName="System 20C" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20C-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="System 25" DisplayName="System 25" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-25-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="System 35" DisplayName="System 35" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-35-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="Cariboni" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-CARIBONI-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="PushDirection" Value="N/A" />
			<SetValue Key="CantileverLength" Value="1.2" />
		</InsertPointObject>
		
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20B-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% else %}45.0
														{% endif %}" />	
			<BlockNameFormat JoinBy="-" >
				NO-BN-2D-JBTEH_UTL-UTLIGGER
				{% if Variant == 'System 20A' %}20A{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'System 20B' %}20B{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'System 20C' %}20C{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'System 25' %}25{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'System 35' %}35{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'Cariboni' %}CARIBONI
				{% else %}BAD_Variant
				{% endif %}
				{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}
			</BlockNameFormat>
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" />
	
	</ObjectType>



<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM WIRE CLAMP
=========================================================================================================-->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" Name="EH-KLK Kontakttrådklemme"
				Layer="JBTEH_KLK" Color="ByLayer"
				Group="Kontaktledning/Klemmer"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
				
		<RelationSpace>kontakttrådklemme</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXATTRIBUTES___VERTICAL_AND_FAR___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="RC_com_SET_OCP_STATION_REFERENCE" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />

		<Variants DefaultValue="Kontakttrådklemme" >
			<Variant Name="Kontakttrådklemme" >
				<SetValue Key="name" Value="Tr.kl." />
				<!-- <SetValue Key="Model3DName" Value="NO-BN-3D-EH-KLK-KONTAKTTRÅDKLEMME" /> -->
				<SetValue Key="Model3DName" Value="NO-BN-3D-EH-KLK-KONTAKTTRÅDKLEMME" />
			</Variant>
		</Variants>

		<LuaExpression Name="code" ><Formula>_JBTEH_KLK_code()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_code()" 
			ReturnType="String"
			Description="Copies the cantilever's code."
		>
			<Constructor>String _JBTEH_KLK_code()</Constructor>
			<Formula>
				function _JBTEH_KLK_code()
					s = "Tilhører utligger"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].code
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="Alignment" ><Formula>_JBTEH_KLK_Alignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_Alignment()" 
			ReturnType="String"
			Description="Obtains the 'code' for this OCS contact wire clamp. Uses relation 'Appartient à armement' to access the related object's data." >
			<Constructor>String _JBTEH_KLK_Alignment()</Constructor>
			<Formula>
				function _JBTEH_KLK_Alignment()
					s = "Tilhører utligger"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].Alignment
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="Mileage" ><Formula>_JBTEH_KLK_Mileage()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_Mileage()" 
			ReturnType="Double"
			Description="Returns contact wire clamp's reference mileage, equal to its cantilever's reference mileage." >
			<Constructor>Double _JBTEH_KLK_Mileage()</Constructor>
			<Formula>
				function _JBTEH_KLK_Mileage()
					s = "Tilhører utligger"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return _info("INCOMPLET - Relier par '"..s.."' à son armement.")
						--return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].Mileage
					end
				end
			</Formula>
		</LuaFunction>
		
		<LuaExpression Name="DistanceToAlignment" ><Formula>_JBTEH_KLK_DistanceToAlignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_DistanceToAlignment()" 
			ReturnType="Double"
			Description="Copies the cantilever's lateral offset (distance to alignment)." >
			<Constructor>Double _JBTEH_KLK_DistanceToAlignment()</Constructor>
			<Formula>
				function _JBTEH_KLK_DistanceToAlignment()
					s = "Tilhører utligger"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].DistanceToAlignment
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="RelativeElevation" ><Formula>_JBTEH_KLK_RelativeElevation()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_RelativeElevation()" 
			ReturnType="Double"
			Description="Copies the cantilever's vertical offset (relative elevation)." >
			<Constructor>Double _JBTEH_KLK_RelativeElevation()</Constructor>
			<Formula>
				function _JBTEH_KLK_RelativeElevation()
					s = "Appartient à armement"
					r,n = RC__getCollectionOfRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].RelativeElevation
					end
				end
			</Formula>
		</LuaFunction>
		
		<InsertPointObject VariantName="Kontakttrådklemme" DisplayBlockName="NO-BN-2D-JBTRC_THUMBNAIL-USPESIFISERT-{{SymbolMode}}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4e-4" >
			<OwnAlignmentTargetSpace>kontaktledning</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="-90" EnableDirectionSetting="true" />
		</InsertPointObject>
		
		<!-- <SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTEH-KLEMPUNKT-KONTAKTTRAADKLEMME" > -->
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTRC_THUMBNAIL-USPESIFISERT-{{SymbolMode}}" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset}}
														{% else %}45.0
														{% endif %}" />	
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" />

		<DockPointDefinitions>
			<SnapPoints>
				<SnapPoint X="0.0" Y="0.0" TargetSpace="utligger" />
			</SnapPoints>
		</DockPointDefinitions>

	</ObjectType>



<!--========================================================================================================
    End of file 
=========================================================================================================-->
</xpp:bloc>
