<!--========================================================================================================

    NO-BN-OcsCantilevers.xml
	
	Include in DNA file using XPPq XML preprocessor directive <xpp:expand href="fileName.xml" />.

	(c) Railcomplete AS, Norway, 2015-2023. All rights reserved.
	
=========================================================================================================-->
<xpp:bloc>

<!--========================================================================================================
	Contents:
	
	OVERHEAD CATENARY SYSTEM - OVERVIEW
	GLOSSARY
	CANTILEVER SUPPORT BRACKET FOR MULTIPLE CANTILEVERS
	OVERHEAD CATENARY SYSTEM CANTILEVER
	OVERHEAD CATENARY SYSTEM WIRE CLAMP
	
=========================================================================================================-->

<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM

	OVERVIEW
	--------
	ow.Z = Vertical offset from gradient curve to contact wire clamp
	ow.X = Lateral offset from gradient curve to contact wire clamp
	wc   = System height. The messenger wire clamp c is forced to be at same XY in plane coordinates.
	
	U-e = Top tube (FR:Hauban, NO:Strekkstag) - may be non-horizontal
	    = Isolator (FR:Isolateur, NO:Isolator)
	*-c = Messenger wire clamp height (NO:Bæreline-klemme høyde over strekkstag)
	*-f = Registration arm (FR:Antibalançant, NO:Direksjonsstag)
	*-w = Steady-arm (FR:Bras de rappel, NO: Lett direksjonsstag)
	111 = Diagonal tube (NO:Diagonalstag)
	222 = Cantilever tube (FR:Console, NO:Trykkstag)
	333 = Registration arm dropper (NO:?????)
	dT  = Catenary pole / support / pole (FR:Support caténaire, NO:KL-pole)

	Stagger (zigsag) (FR:Désaxement, NO:Sikk-sakk)
	The stagger depicted below is negative since w is to the left of b with respect to the tilted train axis a-b.
	
	Positive stagger (contact wire clamp and cantilever upper console on opposite sides of canted track's neutral pantograph centre)
	Negative stagger (zigsag) : Désaxement : Sikksakk towards same-as-pole side

	The drawing depicts a track with clockwise cant seen in the direction of increasing mileage (usually in a curve to the right)
				
    _T_									dT=Support pole height
    | |                (c)          	c=CatenaryWireClamp = Messenger wire clamp (NO:Bærelineklemme)
    | |U||==*=======2===*==3=e      	U=UpperConsoleTowardsPoleSide
    | |	    1     2       3				Ue=Length of top tube (must reach at least to the messenger wire clamp)
    | |      1  2        3				
    | |       2         3            	
    | |     2===*======3==f				wc=SystemHeight (FR:Hauteur du fil de contact, NO:Kontakttrådhøyde)
    | |L||2      \_____             	L=LowerConsoleTowardsPoleSide (FR:Console inférieur, NO:Nedre konsoll)
    | |                \ 	
    | |             :  (w)          	w=ContactWireClamp
    | |                       b     	b=ZeroStaggerNeutralContactWire = centre of pantograph at its nominal position
    | |             :        /      	
    | |                             	bw=Stagger
    | |             :      /        	ab=ContactWireHeight (measured perp to rolling plane)
    | |                              	
    | |       Theta :-- >/          	Theta=Rotation due to cant (clockwise as shown, negative Theta)
    | |                             	h=cant = difference in Z direction between left and right Top-of-Rail (ToR)
    | |             :  /            	LR to RR = cant gauge
    | |                             	LR=LeftRail top-of-rail
    | |     LR      :/              	RR=RightRail top-of-rail
    | |   h |       a               	oa=Rolling plane lift due to cant
  ===d===---+-------o-------RR------	o=The track's gradient curve
    | | 								od.X=OCS pole lateral offset (negative as shown)
   +-x-+  								od.Z=OCS pole vertical offset from its own track's gradient curve
   |   |  								x=Topside of concrete of foundation at center of foundation's shaft			
   |   |  								x is the foundation's insertion point. The bolt group extends upwards.
   |   |  								xd=OCS pole's elevation above its foundation.
 +-+   +----+							Note: The foundation and pole usually belong to the same track, but
 |          |							the cantilever will often belong to a different track. However,
 |          |							each cantilever is required to belong to the track it is serving.
 +----------+											
													
                       
Origo (marked as 'o') is defined by the XY and Z of the associated railway track, the 'gradient curve'.
The rolling plane is lifted and rotated with cant. If e.g. 150 mm clockwise cant is applied, then the
rolling plane is rotated (lifting the left rail, lowering the right rail) by an angle asin(150/1500)
and then lifted 150/2 mm along the vertical axis.
 
The contact wire clamp is held by the steady arm or held directly by the registration arm. The coordinates of the contact
wire clamp coincide with the center of the sweep of the contact wire profile (which is about 1 cm in diameter).

The contact wire clamp is placed in the "rail plane system", ie with height above the track plane (by headroom) and sideways
transfer according to the stagger (zigzag). The clamp is placed in the longitudinal direction of the track on the same 
mileage as the cantilever. The contact wire clamp connects to the cantilever through a suitable relation.
 
The cantilever's insertion point is the upper console's contact point with the track side of the pole. The pole may be
narrowing towards the top, which makes the calculation of the upper console point tricky. It is always straight upright.

The cantilever holds the value for the intended contact wire height. This contact wire height is measured perp to the 
rolling plane. The cantilever also holds the stagger (zigzag). The stagger is measured colinearly to the rolling plane.

The stagger is negative if the contact wire is held at a position resulting in contact with the pantograph's half side 
towards the catenary pole, otherwise it is positive. Note that a negative stagger is possible both with pull-on and with
push-off cantilevers, since the direction force on the wire is also a function of the preceding and the following wire
clamps in relation to the track's geometry and cant.

Formulas are provided to compute the XYZ position of the contact wire clamp and the catenary wire clamp from the track's
gradient curve and cant plus the selected contact wire height and the stagger. The two clamps (or just the wires) are
then connected to each cantilever using a suitable Lua script, the cantilevers being already chained together using the
"next/previous cantilever" relation.
 
The cantilever can suggest to place itself at the correct elevation (Z coordinate) using the position of the contact wire
clamp and the selected cantilever type's standard system height. The catenary wire clamp will usually hold the catenary 
wire at about 10 to 12 cm above the upper tube's centre. Assuming that a horizontal upper tube is desirable, this gives
us the Z coodinate of the cantilever's upper console.

At places where the contact wire is sectioned, the incoming and the outgoing contact+catenary wires must be lifted
gradually up and then led out to their tensioning devices. Two cantilevers are then placed side-by-side (ca 1.20 meter apart)
on the same cantilever support pole using an upper and a lower bracket. This forces the cantilevers' upper consoles to
be placed at the same Z coordinate, so the lifted upper tube will usually be built at an angle up fro the horizontal.

RailCOMPLETE provides two model checks for cantilevers: The first one is simply to check the selected system height
against a table of standard values. An alarm may be triggered when the system height is lowered under a bridge etc.

The second model check is the upper tube's angle with the horizontal. If the user overrides RailCOMPLETE's suggested
Z coordinate for the cantilever (the upper console centre) then the angle will not be zero.

/////// TODO: Other model checks that will be sensible to introduce for cantilevers: 

1 Minimum distance sideways to another cantilever on the same pole (and same side of pole) (they swing with temperature).

2 Maximum allowed distance from nearest anchor (midpoint anchor or untensioned end) taking wire material and temperatures
 (tunnels, outside) into consideration.

3 Stagger within allowed limits, taking the actual track geometry into consideration from the previous to the next 
  cantilever.

4 Stagger is consistent with the rules for stagger on double track (zigzagging the 'same way').

5 Stagger is consistent with the rules for stagger in changeover sections where the two wires are close.

6 The distance to the next wire clamp is within the limits of applicable wind forces

7 The absolute gradient of the contact wire compared to the track's own gradient, is within allowable limits, taking 
  maximum train speeds into consideration.

8 The gradient change from the preceding section to this section and to the next section is within allowable limits,
  taking maximum train speeds into consideration.
  
9 More "mundane" checks, that the cantilever and the related wire clamps (if any) belong to the same track. This would
  also be automated in the wire clamp object (using a Lua formula on the 'Alignment' property).

=========================================================================================================-->



<!--========================================================================================================
	GLOSSARY
	ocs - Overhead catenary System Lua formulas (including return current and earthing).
	Domain-specific Lua functions, stored in Global Extension Dictionary (not in each object).

English										Norwegian							French								German
================================			================================	================================	================================
OCS pole									kl-pole								support_caténaire
portal support pole							åk-pole								support_portique
drop arm (pole suspended from ceiling/portal)hengemast							support_suspendu
contact wire								kontakttråd	                		fil de contact
catenary wire								bæreline	                		fil porteur
stitch wire									y-line	                    		suspension en Y
droppers									hengetråd	                		pendule
current ladder								strømstige	                		
jumper										strømbru	                		
switch wires								bryterline	                		
reinforcing feeder							forsterkningsledning	    		
by-pass feeders								forbigangsledning	        		
by-pass cables								forbigangskabel	            		
feeder line									mateledning	                		
return feeder								returledning	            		
return cable								returkabel	                		
tension line								avspenningsline	            		
bracing line								avspenningsbardunline	    		
soldering line								kurvebardunline	            		
tensioning wire								loddavspenningsline	        		
insulated earth wire						isolert jordleder	        		
flexible by-pass wire						forbikoblingslisse	        		
connection cable for grounding apparatus	kabel for jordingsapparat			
connection feeders							forbindelsesleder	        		
negative feeder in AT system				negativ leder i AT-system			
positive feeder in AT system				positiv leder i AT-system			

-->


	
<!--========================================================================================================
	OVERHEAD CATENARY SYSTEM
	CANTILEVER SUPPORT BRACKET FOR MULTIPLE CANTILEVERS
=========================================================================================================-->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" EulynxDataType="EULYNX.sig.Fixing" LuaName="rctype_MultiCantileverConsole" Name="JBTEH_UTK Seksjonsutliggerkonsoll"
				Layer="JBTEH_UTK" Color="ByLayer"
				Group="Kontaktledning/Konsoller"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
				
		<RelationSpace>seksjonsutliggerkonsoll</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_SYMBOLFRAME" />
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXTATTRIBUTES___HORIZONTAL_AND_MEDIUM_CLOSE___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="NOBN_com_SET_OCP_STATION_REFERENCE" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />

		<Variants DefaultValue="Seksjonsutliggerkonsoll H-300" >
			<!-- The variant's number is the c-c spacing between M20 threaded irons. -->
			<!-- Note: The 'Seksjonsutliggerkonsoll H-300' variant is also suitable for HEB poles up to HEB280 -->
			<Variant Name="Seksjonsutliggerkonsoll B-120" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll B-140" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll B-160" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll B-180" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll B-200" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll H-270" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll H-300" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll H-330" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll H-360" ></Variant>
			<Variant Name="Seksjonsutliggerkonsoll H-390" ></Variant>
		</Variants>
		
		<SetDynamicProperty Type="Representation" Subtype="Geometry3D" />

		<LuaExpression Name="name" ><Formula>Variant</Formula></LuaExpression>

		<LuaExpression Name="Mileage" ><Formula>_JBTEH_UTK_Mileage()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTK_Mileage()" 
				ReturnType="Double"
				Description="Returns the mileage for this multi-cantilever console, deduced from its OCS pole." >
			<Constructor>Double _JBTEH_UTK_Mileage()</Constructor>
			<Formula>
				function _JBTEH_UTK_Mileage()
					return RC__getMileageFromRelatedObject(rel_MultiCantileverConsole_IsInstalledOn_OcsPole)
	       		end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="DistanceToAlignment" ><Formula>_JBTEH_UTK_DistanceToAlignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTK_DistanceToAlignment()" 
				ReturnType="Double"
				Description="Returns the distance to alignment for this multi-cantilever console, moved to the same side of its OCS pole as the cantilevers it serves." >
			<Constructor>Double _JBTEH_UTK_DistanceToAlignment()</Constructor>
			<Formula>
				function _JBTEH_UTK_DistanceToAlignment()
					local sPol = rel_MultiCantileverConsole_IsInstalledOn_OcsPole
					local sCnt = rel_MultiCantileverConsole_IsMountingSurfaceFor_Cantilever
					local rPol,nPol = getRelatedObjects(sPol)
					local rCnt,nCnt = getRelatedObjects(sCnt)
					if nPol == 0 then
						return getPropertyValue("DistanceToAlignment")
					else
						local pol = rPol[0]
						if this.Alignment.id ~= pol.Alignment.id then
							return _error,"ERROR - Multi-cantilever console must belong to the same track ("..pol.Alignment.code..") as its OCS pole."
						end
						if nCnt == 0 then
							--Assume that console will be needed on the track side of its OCS pole (cantilevers will be added afterwards). It may change sides when cantilevers are added.
							return _JBTEH_UTL_DistanceToAlignment(cnt) - (RightSided and 1 or -1) * defaultConsoleDepth
						else
							local cnt = rCnt[0]
							--Place console on the same side of its OCS pole as the first cantilever being related to the console.
							--The height-on-pole is decided by the cantilever's relative elevation - which may be relative to another track:
							--NB We must assume that pole and console have the same own alignment (track).
							--NB The cantilever may belong to a different track, e.g. at the deviating track in a switch.
							local dPol = pol.DistanceToAlignment
							local dCnt = cnt:getAlignmentInfo(pol.Alignment.id).DistanceToAlignment
							local d = NOBN_ocs_getPoleHalfWidth(pol,this.RelativeElevation)
							if math.abs(dCnt) &lt; math.abs(dPol) then
								--Place on front side of its OCS pole (facing the track):
								return dPol - (RightSided and 1 or -1) * d
							else
								--Place on rear side of OCS pole:
								return dPol + (RightSided and 1 or -1) * d
							end
						end
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="dir" ><Formula>_JBTEH_UTK_dir()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTK_dir()" 
				ReturnType="Double"
				Description="Returns the 'dir' for this multi-cantilever console, deduced from its OCS pole and its cantilevers." >
			<Constructor>Double _JBTEH_UTK_dir()</Constructor>
			<Formula>
				function _JBTEH_UTK_dir()
					local sPol = rel_MultiCantileverConsole_IsInstalledOn_OcsPole
					local sCnt = rel_MultiCantileverConsole_IsMountingSurfaceFor_Cantilever
					local rPol,nPol = getRelatedObjects(sPol)
					local rCnt,nCnt = getRelatedObjects(sCnt)
					if nPol == 0 then
						return getPropertyValue("DistanceToAlignment")
					else
						local pol = rPol[0]
						if this.Alignment.id ~= pol.Alignment.id then
							return _error,"ERROR - Multi-cantilever console must belong to the same track ("..pol.Alignment.code..") as its OCS pole."
						end
						if nCnt == 0 then
							--Assume that console will be needed on the track side of its OCS pole (cantilevers will be added afterwards).
							--Note: It may change sides when the cantilevers are related to it.
							return _JBTEH_UTL_DistanceToAlignment(cnt) - (RightSided and 1 or -1) * defaultConsoleDepth
						else
							local cnt = rCnt[0]
							--Place console on the same side of its OCS pole as the first cantilever being related to the console.
							--The height-on-pole is decided by the cantilever's relative elevation - which may be relative to another track:
							--NB We must assume that pole and console have the same own alignment (track).
							--NB The cantilever may belong to a different track, e.g. at the deviating track in a switch.
							local dPol = pol.DistanceToAlignment
							local dCnt = cnt:getAlignmentInfo(pol.Alignment.id).DistanceToAlignment
							local d = NOBN_ocs_getPoleHalfWidth(pol,this.RelativeElevation)
							if math.abs(dCnt) &lt; math.abs(dPol) then
								--Placed on front side of its OCS pole (facing the track):
								return "both"
							else
								--Placed on rear side of OCS pole:
								return "none"
							end
						end
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="Geometry3D_0.Name" ><Formula>"NO-BN-3D-EH-UTK-SEKSJONSUTLIGGERKONSOLL-1440-"..Variant:match("%a-([BH]+%-%d+)$")</Formula></LuaExpression>

		<LuaExpression Name="mc_Alignment" ><Formula>_JBTEH_UTK_chkAlignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTK_chkAlignment()" 
				ReturnType="Double"
				Description="Returns the 'dir' for this multi-cantilever console, deduced from its OCS pole and its cantilevers." >
			<Constructor>Double _JBTEH_UTK_chkAlignment()</Constructor>
			<Formula>
				function _JBTEH_UTK_Mileage()
					return RC__getMileageFromRelatedObject(rel_MultiCantileverConsole_IsInstalledOn_OcsPole)
	       		end
			</Formula>
		</LuaFunction>

<!-- TODO Seksjonsutliggerkonsoll skal snappe til mast, og skal selv tilby snapping for utliggere -->
		<!-- TODO Seksjonsutliggerkonsoll skal bevege seg mot sporet på funksjon av mastens tykkelse (som utliggere) -->
		<!-- TODO Seksjonsutliggerkonsoll skal finne sin høyde fra utliggernes øvre konsoll (som skal være like) -->
		<InsertPointObject VariantName="Seksjonsutliggerkonsoll H-300" DisplayBlockName="NO-BN-2D-JBTEH_UTK-KONSOLL-FOR-SEKSJONSUTLIGGER-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="false" SnapDistance="4.0" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace> 
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
		</InsertPointObject>
		
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset}}
														{% else %}45.0
														{% endif %}" />	
			<BlockNameFormat JoinBy="-" >
				NO-BN-2D-JBTEH_UTK-KONSOLL-FOR-SEKSJONSUTLIGGER-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}
			</BlockNameFormat>
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" DoNotIncludeInSymbolFrame="true" />

		<DockPointDefinitions>
			<SnapPoints>
				<SnapPoint X="0.0" Y="0.0" TargetSpace="utligger" />
			</SnapPoints>
		</DockPointDefinitions>

	</ObjectType>



<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM CANTILEVER
=========================================================================================================-->
	<!-- Note: Function declared globally in DNA, so it is accessible from scripts. -->
	<LuaFunction Name="NOBN_ocs_getCantileverStandardValues()" 
		ReturnType="Table[8*Double]"
		Description="Returns a table with standard cantilever values, indexed as follows:
		\n
		\n[cwh]   Contact wire height
		\n[sh]    System height
		\n[shmin] Minimum system height
		\n[shmax] Maximum system height
		\n[lco]   Lower console offset from upper console
		\n[wco]   Contact wire clamp offset from upper console
		\n[drMat] Dropper material
		\n[swMat] Stitch wire material ('None': cantilever has no stitch wire)
		\n" >
		<Constructor>Table[8*Double] NOBN_ocs_getCantileverStandardValues(OcsSystem os = Variant)</Constructor>
		<Formula>
			function NOBN_ocs_getCantileverStandardValues(os)
				--This function is declared as global in the DNA, accessible from all object types and scripts.
				os = os or Variant --The Variant is also the OCS system's name.
				local CantileverValues = {
					--Note: Siemens' catenary wire clamp is about 12 cm high (117mm), above the upper tube
					["Unknown"]  = {cwh=0.00, sh=0.00, shmin=0.00, shmax=0.00, lco=-0.00, wco=-0.00,  drMat="",            swMat=""          },
					["S25"]      = {cwh=5.10, sh=1.80, shmin=0.70, shmax=1.80, lco=-2.05, wco=-1.70,  drMat="Bz II 10/49", swMat="Bz II 35/7"},
					["S20A"]     = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S20AR"]    = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S20B"]     = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S20BR"]    = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S20C1"]    = {cwh=5.30, sh=0.75, shmin=0.75, shmax=1.60, lco=-0.95, wco=-0.65,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S20C2"]    = {cwh=5.30, sh=0.75, shmin=0.75, shmax=1.60, lco=-0.95, wco=-0.65,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S35"]      = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["S35MS"]    = {cwh=5.60, sh=1.60, shmin=1.20, shmax=1.60, lco=-1.80, wco=-1.50,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["Cariboni"] = {cwh=5.05, sh=0.60, shmin=0.25, shmax=0.60, lco= 0.00, wco=-0.70,  drMat="Bz II 10/49", swMat="Bz II 25/7"},
					["TET08"]    = {cwh=5.05, sh=0.25, shmin=0.10, shmax=0.30, lco= 0.00, wco=-0.075, drMat="Bz II 10/49", swMat="Bz II 25/7"}
				} 
				return CantileverValues[os]
			end 
		</Formula>
	</LuaFunction>

	<LuaFunction Name="NOBN_ocs_getPoleHalfWidth()"
		ReturnType="Double"
		Description="Returns an OCS pole's half width (assuming symmetry around its insertion point), at insertion point level or at a specified height above insertion point." >
		<Constructor>Double NOBN_ocs_getPoleHalfWidth([ObjRef ocsPole [, Double heightOnPole]])</Constructor>
		<Formula>
			function NOBN_ocs_getPoleHalfWidth(ocsPole,height)
				local pol = ocsPole or this
				if not pol.RcType:match("JBTEH_MAS") then return 0,_error, _info("ERROR - function works only for OCS poles or drop arms") end
				local h = heightOnPole or 0
				local pv = pol.Variant
				local pp = pol.OcsPoleCrossSection
				local d = 0.999 --default value - a sizeable pole diameter...a bad value which is easily recognized as such.
			
				if pv == "Bjelkemast" then
					d = string.sub(pp,4,6)/2 * (1/1000) --[m] Assume pole profile names "HEB200", "HEB220" etc
		
				elseif pv == "GMB-mast" then
					d = string.sub(pp,4,6)/2 * (1/1000) --[m] Assume pole profile names "HEB200", "HEB220" etc TODO: Find the real profiles for for "GMB-mast" poles
		
				elseif pv == "H-mast" then
					d = (pol.OcsPoleHeight - h) * (1/50) * (1/1000) --[m] 1:50 approx. angle on side of pole (0.020000)
		
				elseif pv == "B-mast" then
					d = (pol.OcsPoleHeight - h) * (1/50) * (1/1000) --[m] 1:50 approx. angle on side of pole (1/44 = 0.023 for B2, but 1/50.5 = 0.0.019789 for B3, B4, B5, B6)
		
				elseif pv == "Betongmast" then
					d = 0.13
		
				elseif pv == "Tremast" then
					d = 0.13
		
				elseif pv == "Hengemast for bru og tunnel" then
					if (pp == "Sirkulær, Ø120") then 
						d = 0.060
					elseif (pp == "Kvadratisk, 100x100") then
						d = 0.050
					elseif (pp == "Rektangulær, 100x150") then
						d = 0.075
					elseif (pp == "Rektangulær, 100x200") then 
						d = 0.100
					else
						return 0,_warning, _info("Bad OCS pole profile ["..pp.."].")
					end
		
				elseif pv == "Hengemast i åk" then
					if (pp == "Kvadratisk, 100x100") then 
						d = 0.05
					elseif (pp == "Rektangulær, 100x150") then 
						d = 0.075
					elseif (pp == "Rektangulær, 100x200") then 
						d = 0.100
					end
		
				elseif pv == "Hengemast Cariboni" then
					if (pp == "Rektangulær, 100x150") then 
						d = 0.075
					end
		
				elseif pv == "Hengemast TET08" then
					if (pp == "U-bjelke") then 
						d = 0.075
					end
	
				else 
					return 0,_warning, _info("Bad OCS pole variant ["..pv.."].")
				end
				return d
			end
		</Formula>
	</LuaFunction>

	<LuaFunction Name="NOBN_ocs_getWireClampPoint3D()" ReturnType="Point3D" 
		HideFromUser="false"
		Description="Returns the World Coordinate System 3D coordinates of a cantilever's contact wire clamp position." >
	<Constructor>Double NOBN_ocs_getWireClampPoint3D(objRef Cantilever)</Constructor>
	<Formula>
			function NOBN_ocs_getWireClampPoint3D(cnt)
				function rot(x,y,phi) return x*math.cos(phi) - y*math.sin(phi), x*math.sin(phi) + y*math.cos(phi) end
				trackId = cnt.Alignment.id
				ai = getAlignmentInfo(trackId,cnt.geoCoord.X,cnt.geoCoord.Y)
				sign = cnt.rightsided and -1 or 1
				cwh = cnt.ContactWireHeight
				zigzag = cnt.stagger
				h = ai.cant/1000.0
				cr = ai.cantrotation
				theta = math.atan(h/cnt.Alignment.AlignmentSystem.CantGauge)
				theta = cr and (cr == "CW" and theta or -theta) or 0
				centreTrack = ai.point  --The point where the cantilever is projected onto its track
				phi = math.atan(ai.tangent.Y, ai.tangent.X)  --This cantilever's track's tangential direction angle in radians in WCS
				--(x,0,z) -- No longitudinal wire clamp offset:
				x = cwh*math.sin(theta) + sign*zigzag*math.cos(theta)
				y = 0
				z = h/2 + cwh*math.cos(theta) - sign*zigzag*math.sin(theta)
				--(X,Y,Z):
				X,Y = rot(-y,x,phi) -- Adjust for potential cosmetic angular offset (typically adding 17 degrees visually in 2D to better show cantilevers under portals)
				Z = z
				return getPoint3D(centreTrack.X + X, centreTrack.Y + Y, centreTrack.Z + Z)
			end
		</Formula>
	</LuaFunction>


	<!-- Ref. Bane NOR Teknisk Regelverk, 540 Kontaktledning/Prosjektering og 541 Bygging/Mekanisk utforming -->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" EulynxDataType="EULYNX.sig.Fixing" LuaName="rctype_Cantilever" Name="JBTEH_UTL Utligger"
				Layer="JBTEH_UTL" Color="ByLayer"
				Group="Kontaktledning/Utliggere"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
			
		<RelationSpace>utligger</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_SYMBOLFRAME" />
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXTATTRIBUTES___VERTICAL_AND_MEDIUM_FAR___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="NOBN_com_SET_OCP_STATION_REFERENCE" />

		<!-- Use custom version of wayside general object Lua functions (due to the possible angular offset): -->
		<!-- <xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" /> -->

		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA_EH_UTL" />

		<SetDynamicProperty Type="Representation" Subtype="Geometry3D" />
		
		<Variants DefaultValue="S20A" >
			<Variant Name="Unknown"
				Description="System-type har ikke blitt definert." >
			</Variant>
			<Variant Name="S25"
				Description="System 25: 250 km/h (1 strømavtager) / 210 km/h (2 strømavtagere). Alle strekninger." >
			</Variant>
			<Variant Name="S20A"
				Description="System 20A: 200 km/h (1 strømavtager) / 160 km/h (2 strømavtagere). Fri strekning." > 
			</Variant>
			<Variant Name="S20AR"
				Description="System 20A redusert: 180 km/h (1 strømavtager) / 160 km/h (2 strømavtagere). Der traseens horisontalkurvatur i hovedsak er mindre enn 500 meter og ved endringer på eksisterende bane som har system 35." > 
			</Variant>
			<Variant Name="S20B"
				Description="System 20B: 160 km/h (1 strømavtager) / 130 km/h (2 strømavtagere). Fri strekning under lave konstruksjoner." >
			</Variant>
			<Variant Name="S20BR"
				Description="System 20B redusert: 150 km/h (1 strømavtager) / 130 km/h (2 strømavtagere). Der traseens horisontalkurvatur i hovedsak er mindre enn 500 meter og ved endringer på eksisterende bane som har system 35MS." >
			</Variant>
			<Variant Name="S20C1"
				Description="System 20C1: 200 km/h (1 strømavtager) / 160 km/h (2 strømavtagere). Tunnel." >
			</Variant>
			<Variant Name="S20C2"
				Description="System 20C2: 160 km/h (1 strømavtager) / 130 km/h (2 strømavtagere). Trang tunnel." >
			</Variant>
			<Variant Name="S35"
				Description="System 35: 150 km/h (1 strømavtager) / 130 km/h (2 strømavtagere). Eldre strekninger. Ved endringer på strekning som har S35 brukes i stedet S20B med redusert innspenningskraft (S20BR)." >
			</Variant>
			<Variant Name="S35MS"
				Description="System 35MS: 130 km/h (1 strømavtager) / 120 km/h (2 strømavtagere). Eldre strekninger. Ved endringer på strekning som har S35 brukes i stedet S20B med redusert innspenningskraft (S20BR)." >
			</Variant>
			<Variant Name="Cariboni"
				Description="Cariboni: 200 km/h (1 strømavtager) / 160 km/h (2 strømavtagere). Tunnel." >
			</Variant>
			<Variant Name="TET08"
				Description="TET-08: 200 km/h (1 strømavtager) / 160 km/h (2 strømavtagere). Tunnel." >
				<SetValue Key="PushDirection" Value="PULL" />
			</Variant>
		</Variants>
		
		<SetValue Key="PushDirection" Value="PULL" />

		<!-- Generic attributes -->
		<!-- Linear address attributes -->
		<LuaExpression Name="ReferenceMileage" ><Formula>_JBTEH_UTL_ReferenceMileage()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_ReferenceMileage()" ReturnType="Double"
				Description="Returns cantilever's reference mileage, based on its OCS pole's reference mileage. If more cantilevers are located on one side of the pole, they will arbitrate positions."
				HideFromUser="false" >
			<Constructor>Double _JBTEH_UTL_ReferenceMileage()</Constructor>
			<Formula>
				function _JBTEH_UTL_ReferenceMileage()
					local StandardCantileverSpacing = 1.20 --[m] Separation to allow cantilevers to swing +/- 60 cm towards each other with temperature-induced movement.
					local sPol = rel_Cantilever_BelongsTo_OcsPole
					local rPol,nPol = getRelatedObjects(sPol)
					if nPol == 0 then
						if (Alignment == nil) then
							return 0, _info("UNFINISHED - Relate with '"..sPol.."' to OCS pole and assign cantilever to an aligment.")
						else
							return getPropertyValue("ReferenceMileage") == nil and 0 or getPropertyValue("ReferenceMileage"),
								_info("UNFINISHED - Relate with '"..sPol.."' to OCS pole.")
						end
					else
						local pol = rPol[0]
						local sCnt = rel_OcsPole_Has_Cantilever
						local rCnt,nCnt = pol:getRelatedObjects(sCnt)
						local me = nil --who am I?
						local i
						for i = 0, nCnt-1 do
							if id == rCnt[i].id then
								me = i 
							end
						end
						if me == nil then 
							return pol.ReferenceMileage,_warning, _info("Corrupt relation '"..sCnt.."' to OCS pole - cannot compute cantilever position.")
						end
						--Anyone else on my side of OCS pole?
						--Note: Cantilevers on same side may serve the same track (change of OCS wire) or different tracks (in a switch)
						local d1 = getAlignmentInfo(Alignment.id,pol.geoCoord.X, pol.geoCoord.Y).DistanceToAlignment --distance from OCS to my cantilever's alignment
						local myLastPal = nil
						local nPals = 0
						for i = 0, nCnt-1 do
							if i ~= me then
								--find signed distance from pole to both cantilever's alignments - if same sign, then they are on the same side: 
								local d2 = getAlignmentInfo(getObjectFromId(rCnt[i].id).Alignment.id,pol.geoCoord.X,pol.geoCoord.Y).DistanceToAlignment
								if d1 * d2 &gt; 0 then
									--same side
									myLastPal = i
									nPals = nPals + 1
								end
							end
						end
						if nPals == 0 then
							return pol.ReferenceMileage 
						elseif nPals == 1 then
							if me &lt; myLastPal then 
								return pol.ReferenceMileage - StandardCantileverSpacing/2
							else
								return pol.ReferenceMileage + StandardCantileverSpacing/2
							end
						else 
							return pol.ReferenceMileage,_warning, _info("Too many ["..(nPals+1).."] cantilevers on same side of OCS pole.")
						end
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="code" ><Formula>_JBTEH_UTL_code()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_code()" 
			ReturnType="String"
			Description="Obtains the 'code' for this OCS cantilever, consisting of the pole's code, a slash '/', and the contact wire's literal name. Missing info is shown as '?'.
						\n
						\nExample:
						\nPole code	Wire name 	Cantilever code
						\n71-13		L30-447		71-13/L30-447
						\n" >
			<Constructor>String _JBTEH_UTL_code()</Constructor>
			<Formula>
				function _JBTEH_UTL_code()
					pol = getRelatedObjects(rel_Cantilever_BelongsTo_OcsPole)[0]
					cow = getRelatedObjects(rel_Cantilever_Holds_ContactWire)[0]
					return (pol and pol.code or "?") .."/".. (cow and cow.code or "?")
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="DistanceToAlignment" ><Formula>_JBTEH_UTL_DistanceToAlignment()</Formula></LuaExpression>
<!-- TODO: Adjust cantilever position towards track if they should adapt to a console holding multiple cantilevers -->
		<LuaFunction Name="_JBTEH_UTL_DistanceToAlignment()" 
			ReturnType="Double"
			Description="Returns cantilever's distance to own alignment, based on its OCS pole's type and position. (2020-02-16: Formula does not take into account the angularOffset of the pole.)" >
			<Constructor>Double _JBTEH_UTL_DistanceToAlignment(ObjRef Cantilever = this)</Constructor>
			<Formula>
				function _JBTEH_UTL_DistanceToAlignment(cnt)
					local cnt = cnt or this
					if (Alignment == nil) then 
						--If cantilever has no alignment, set to 4e-4 (maintain sideOfAlignment)
						return RightSided and 4e-4 or -4e-4,_warning, _info("Cantilever is not connected to a track (own alignment).")
					end
					local sPol = rel_Cantilever_BelongsTo_OcsPole
					local rPol,nPol = getRelatedObjects(sPol,cnt)
					if nPol == 0 then
						return RightSided and 4e-4 or -4e-4,_warning, _info("Cantilever is missing relation '"..sPol.."' to OCS pole.")
					else
						-- Cantilever's OCS pole does not have to be connected a track - this Lua snippet works fine without.
						local pol = rPol[0]
						local d = NOBN_ocs_getPoleHalfWidth(pol,this.RelativeElevation)

						-- OCS pole and cantilever may belong to different tracks (when OCS pole is located between tracks):
						--Distance from center OCS pole to the *cantilever's* alignment:
						local mdist = getAlignmentInfo(Alignment.id,pol.geoCoord.X,pol.geoCoord.Y).DistanceToAlignment
						if mdist &gt; 0 then 
							return mdist - d
						else
							return mdist + d
						end
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="dir" ><Formula>"both"</Formula></LuaExpression>
		<LuaExpression Name="RelativeElevation" ><Formula>ContactWireHeight - NOBN_ocs_getCantileverStandardValues(Variant)["wco"]</Formula></LuaExpression>


		<!-- Primary custom attributes (generally input by hand or script) -->

		<!-- 2022-07-30 CLFEY Deprecated, now included in Variant: CustomAttribute DataType="Enumeration" Name="SubVariant" DisplayName="SubVariant"  -->

        <CustomAttribute DataType="Double" Name="Stagger" DisplayName="Sikk-sakk" DefaultValue="0.000"
			Description="Stagger [m] (zigzag) denotes the distance from contact wire clamp to centre track, measured co-linearly with the top-of-rail plane. A positive stagger means pushing away from pole, negative means pulling towards pole." />
		
		<CustomAttribute DataType="Double" Name="ContactWireHeight" DisplayName="Kontakttrådhøyde" DefaultValue="5.00" 
			Description="The contact wire height (cwh) [m] denotes the orthogonal distance from the rolling plane formed by the top-of-rails to the contact wire clamp." />
		<LuaExpression Name="ContactWireHeight" ><Formula>NOBN_ocs_getCantileverStandardValues(Variant)["cwh"]</Formula></LuaExpression>

		<CustomAttribute DataType="Double" Name="SystemHeight" DisplayName="Systemhøyde" DefaultValue="1.00" 
			Description="The cantilever system height (sh) [m] denotes the vertical Z coordinate difference from the contact wire clamp to the catenary clamp." />
		<LuaExpression Name="SystemHeight" ><Formula>NOBN_ocs_getCantileverStandardValues(Variant)["sh"]</Formula></LuaExpression>

		<CustomAttribute DataType="Double" Name="StitchWireLength" DisplayName="Y-line lengde" DefaultValue="0.00" 
			Description="The stitch wire length (swl) [m] denotes the length, measured as a difference in mileage, from start to end (where it attaches to the catenary wire). Zero length means 'no stitch wire'." />


		<!-- Secondary custom attributes (generally derived from other attributes through suitable formulas) -->
		<CustomAttribute DataType="Enumeration" Name="PushDirection" DisplayName="Kraftretning" DefaultValue="Pull"
			Description=
			"The cantilever push direction (cpd) [Push | Pull] is denoted 'Pull' if the cantilever pulls the contact wire towards the cantilever console(s), and 'Push' if it pushes it away." >
			<Values Variant="S20A" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S20AR" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S20B" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S20BR" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S20C1" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S20C2" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S25" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S35" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="S35MS" >
				<Value DisplayName="Strekk" Description="Utliggeren strekkes (trekker ledningen til seg)" >Pull</Value>
				<Value DisplayName="Trykk" Description="Utliggeren sammentrykkes (skyver ledningen fra seg)" >Push</Value>
				<!-- <Value DisplayName="Pull" Description="The cantilever is stretched (pulling the wire towards the pole)" >Pull</Value> -->
				<!-- <Value DisplayName="Push" Description="The cantilever is compressed (pushing the wire away from the pole)" >Push</Value> -->
			</Values>
			<Values Variant="Cariboni" >
				<Value DisplayName="Strekk" Description="Cariboni-utliggeren har horisontalt justeringsmonn og skal alltid være montert i strekk" >Pull</Value>
			</Values>
			<Values Variant="TET08" >
				<Value DisplayName="Strekk" Description="TET08-utliggeren har ikke justeringsmonn og skal alltid være montert i strekk" >Pull</Value>
			</Values>
		</CustomAttribute>
		<LuaExpression Name="PushDirection" ><Formula>_JBTEH_UTL_PushDirection()</Formula></LuaExpression>

		<LuaFunction Name="_JBTEH_UTL_PushDirection()" 
			ReturnType="String"
			Description="Returns the cantilever's push/pull direction, deduced from the contact wire's angular change at this cantilever. Direction change angle [DD] and lateral force [N] are shown as tooltip info." >
			<Constructor>String _JBTEH_UTL_PushDirection()</Constructor>
			<Formula>
				function _JBTEH_UTL_PushDirection()
					--[=[
						Returns the cantilever's push/pull direction, deduced from the contact wire's angular change at this cantilever.
						The trick is to check the sign of the Z component of the cross product of vectors from the middle wire clamp to the prev/next
						wire clamp (or the prev/next wire tension balancer = OCS pole insertion point). The next/prev vectors are treated in the XY plane.
						.
						Find the net force acting on a cantilever, return Push or Pull accordingly.
						p2 = this cantilever
						wc = this cantilever's contact wire clamp
						.
						.   (prev)  (this)   (next)
						.     p1      p2      p3     Cantilevers (attached to OCS pole). Note: The very first p1 can be a WTB.
						.      |       |       |
						.     U|      V|      W|     Vectors from cantilever's insertion point to corresponding wire clamp (in 2D but including cant effect) 
						.   ---v-------^-------v---  Contact wire
						.     wc1     wc2     wc3    Wire clamps
						.
						.   All coordinates are in WCS.
					--]=]
					function p2s(u) return string.format(" (%.03f,%.03f)",u.X,u.Y) end --Used for debugging purposes, pretty-print 2D point
				
					--Previous:
					prev = getRelatedObjects(rel_CantileverOrWtb_HasPrevious_CantileverOrWtb)[0]
					p1 = getPoint3D(prev.geoCoord.X, prev.geoCoord.Y)
					if prev.RcType == rctype_WireTensioner then
						--Preceded by a Wire Tension Balancer.
						wc1 = p1
					else
						--Preceded by a cantilever.
						--Add vector from insertion point to contact wire clamp, in WCS coordinates:
						t = getAlignmentInfo(prev.Alignment.id,p1).Tangent
						tg = math.atan(t.Y,t.X)
						U = getPoint3D(RC__getWcsVectorFromAcsVector(prev.WireClampLateralOffset - prev.DistanceToAlignment, 0, tg))
						wc1 = getVectorSum(p1,U)
					end
				
					--This:
					p2 = getPoint3D(this.geoCoord.X, this.geoCoord.Y)
					--Add vector from insertion point to contact wire clamp, in WCS coordinates:
					t = getAlignmentInfo(this.Alignment.id,p2).Tangent
					tg = math.atan(t.Y,t.X)
					V = getPoint3D(RC__getWcsVectorFromAcsVector(this.WireClampLateralOffset - this.DistanceToAlignment, 0, tg))
					wc2 = getVectorSum(p2,V)
				
					--Next:
					nxt = getRelatedObjects(rel_CantileverOrWtb_HasNext_CantileverOrWtb)[0]
					p3 = getPoint3D(nxt.geoCoord.X, nxt.geoCoord.Y)
					if nxt.RcType == rctype_WireTensioner then
						--Followed by a Wire Tension Balancer.
						wc3 = p3
					else
						--Followed by a cantilever.
						--Add vector from insertion point to contact wire clamp, in WCS coordinates:
						t = getAlignmentInfo(nxt.Alignment.id,p3).Tangent --local track tangent vector t.XYZ
						tg = math.atan(t.Y,t.X)
						W = getPoint3D(RC__getWcsVectorFromAcsVector(nxt.WireClampLateralOffset - nxt.DistanceToAlignment, 0, tg))
						wc3 = getVectorSum(p3,W)
					end
				
					toPrev = getVectorDifference(wc1,wc2)
					toNext = getVectorDifference(wc3,wc2)
					crossProduct = getVectorCrossProduct(toPrev,toNext)
				
					--Find contact wire lateral force:
					contactWireTension = NOBN_ocs_getWireTensioningDataTable(Variant).cwtf * 1000 --Table contains kN values
					toPrevForceVector =  getVectorScalarProduct(contactWireTension,getVectorNormalized(toPrev))
					toNextForceVector = getVectorScalarProduct(contactWireTension,getVectorNormalized(toNext))
					lateralForceVector = getVectorSum(toPrevForceVector,toNextForceVector)
					lateralForce = getVectorModulus(lateralForceVector)
					directionChangeDD = (crossProduct.Z &gt; 0 and -1 or 1) * getVectorAngleDD(getVectorScalarProduct(-1,toPrev),toNext)
					forceDirection = (RightSided and crossProduct.Z &gt; 0 or LeftSided and crossProduct.Z &lt; 0) and "Push" or "Pull"
					--if true then return p2s(toPrevForceVector),p2s(toNextForceVector),p2s(lateralForceVector),lateralForce,directionChangeDD end
				
					t = string.format("'%s' with lateral force %.01f Newton and direction change %.03f decimal degrees"
						.." was deduced from previous cantilever/WTB '%s', this cantilever '%s'"
						.." and next cantilever/WTB '%s'.",
						forceDirection,lateralForce,directionChangeDD,RC__identify(prev),RC__identify(this),RC__identify(nxt))
				
					return forceDirection, _info(t)
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="String" Name="StaggerDisplay" DisplayName="Sikk-sakk visning" DefaultValue="" 
			Description="The stagger value, as shown next to the cantilever [cm]." />
		<TextAttribute Annotative="true" BindingProperty="StaggerDisplay" CadAttributeTag="SIKKSAKK" X="-2.75" Y="-6" 
			Layer="JBTEH@SIKKSAKK" Justify="MiddleCenter" Height="1.25" Width="0" Rotation="0"
			ObliqueAngle="0" Constant="false" Invisible="false" Lock="false" MText="false" />       
		<LuaExpression Name="StaggerDisplay" ><Formula>_JBTEH_UTL_StaggerDisplay()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_StaggerDisplay()" ReturnType="Double" 
				HideFromUser="false"
				Description="Returns the rounded stagger value in centimeters. A negative stagger means that the cantilever holds the contact wire in a position such that it touches a passing train's pantograph side which is closest to the OCS pole. Note that the tip of the cantilever's 2D symbol is located in 2D relative to the track's 2D polyline representation, which does not show the effect of cant. The actual contact wire position in 3D is shifted sideways as a function of the track's cant. The net effect is that the 2D cantilever's tip is located at the stagger distance from the 2D contact wire." >
			<Constructor>Double _JBTEH_UTL_StaggerDisplay()</Constructor>
			<Formula>
				function _JBTEH_UTL_StaggerDisplay()
					return string.format("%.0f",Stagger*100) --Centimeters
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CantileverLength" DisplayName="Utliggerlengde" DefaultValue="4.0"
			Description="The cantilever's length [m] is measured from console (pole side) to contact wire clamp, perpendicularly to the track. The Cariboni variant has a constant length of 1200 mm." >
		</CustomAttribute>
		<LuaExpression Name="CantileverLength" ><Formula>_JBTEH_UTL_CantileverLength()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CantileverLength()" 
			ReturnType="String"
			Description="Returns the cantilever's length, adjusted for OCS pole placement and pole profile, pole's side of track, stagger and local cant. Cariboni is always 1200 mm long." >
			<Constructor>Double _JBTEH_UTL_CantileverLength(Double CantileverLength)</Constructor>
			<Formula>
				function _JBTEH_UTL_CantileverLength()
					if Variant == "Cariboni" then
						return 1.200
					else
						cl = math.abs(DistanceToAlignment) + Stagger
						return string.format("%.03f",cl)
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Int32" Name="CantileverLengthDisplay" DisplayName="Utliggerlengde visning" DefaultValue="4000"
			Description="The cantilever's display length [mm] [1000..6000], rounded to closest multiple of 100 mm. Cariboni is always 1200 mm long." >
		</CustomAttribute>
		<LuaExpression Name="CantileverLengthDisplay" ><Formula>_JBTEH_UTL_CantileverLengthDisplay(CantileverLength)</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CantileverLengthDisplay()" 
			ReturnType="String"
			Description="Returns the cantilever's display length, min 1000mm, max 6000mm, rounded to nearest multiple of 100mm. Cariboni is always 1200 mm long." >
			<Constructor>Int _JBTEH_UTL_CantileverLengthDisplay(Double CantileverLength)</Constructor>
			<Formula>
				function _JBTEH_UTL_CantileverLengthDisplay(CantileverLength)
					if Variant == "Cariboni" then
						return "1200"
					else
						--NB! Step size, minimum and maximum lengths must be consistent with the 2D library file:
						step = 10 --mm (10mm in DNA NO-BN-2023.a, was 50 mm in 2021.a)
						minL = 1000 --mm
						maxL = 6000 --mm
						local L = step * ((1000*CantileverLength + step/2)//step)
						if L &lt; minL then 
							return minL
						elseif L &gt; maxL then 
							return maxL
						else 
							return RC__toInt(L)
						end
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CantileverSpanlength" DisplayName="Utligger spennlengde" DefaultValue="0.0" 
			Description="The cantilever span length (sl) [m] denotes the 2D straight line distance (projected onto the XY plane) from this cantilever's contact wire clamp to the next, related using '&quot;..rel_CantileverOrWtb_HasNext_CantileverOrWtb..&quot;'/'&quot;..rel_CantileverOrWtb_HasPrevious_CantileverOrWtb..&quot;'." />
		<LuaExpression Name="CantileverSpanlength" ><Formula>_JBTEH_UTL_Spanlength()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_Spanlength()" ReturnType="Double" 
			HideFromUser="false"
			Description="Returns the straight-line 2D distance span length [m] between this cantilever's wire clamp and its related next cantilever's wire clamp (this is the wire's 2D length - the 3D length is slightly longer)." >
		<Constructor>Double _JBTEH_UTL_Spanlength()</Constructor>
		<Formula>
			function _JBTEH_UTL_Spanlength()
				return 34.567
			end
		</Formula>
	</LuaFunction>
			<!-- LEGACY 2021.a - function _JBTEH_UTL_Spanlength() -->
				<!-- --This cantilever: -->
				<!-- vv = getPoint3D(this.geoCoord.X, this.geoCoord.Y, 0) --Ignore the Z coordinate -->
				<!-- --Add vector from insertion point to contact wire clamp, in WCS coordinates: -->
				<!-- t = getAlignmentInfo(this.Alignment.id,vv).Tangent --local track tangent vector t.XYZ -->
				<!-- tg = math.atan(t.Y,t.X) -->
				<!-- cantileverVector = getPoint3D(RC__getWcsVectorFromAcsVector(this.WireClampLateralOffset-this.DistanceToAlignment,0,tg)) -->
				<!-- v = getVectorSum(vv,cantileverVector) -->
				
				<!-- --Next cantilever: -->
				<!-- s = rel_CantileverOrWtb_HasNext_CantileverOrWtb -->
				<!-- r,n = getRelatedObjects(s) -->
				<!-- if n == 0 then -->
					<!-- return 0.0, _info("UNFINISHED - Relate with '"..s.."' to next OCS cantilever, otherwise span length cannot be computed.") -->
				<!-- else -->
					<!-- nextItem = r[0] -->
					<!-- ww = getPoint3D(nextItem.geoCoord.X, nextItem.geoCoord.Y) -->
					<!-- if nextItem.RcType == rctype_WireTensioningBalancer then -->
						<!-- w = ww -->
					<!-- else -->
						<!-- t = getAlignmentInfo(nextItem.Alignment.id,ww).Tangent --local track tangent vector t.XYZ -->
						<!-- tg = math.atan(t.Y,t.X) -->
						<!-- wcNext = getPoint3D(RC__getWcsVectorFromAcsVector(nextItem.WireClampLateralOffset-nextItem.DistanceToAlignment,0,tg)) -->
						<!-- w = getVectorSum(ww,wcNext) -->
					<!-- end -->
			
					<!-- d = getVectorModulus(getVectorDifference(w,v)) --2D length -->
					<!-- return string.format("%.03f",d), _info("Spanlength deduced as a 2D distance (ignoring Z coordinates) between the wire clamps at cantilevers "..RC__identify(this).." and "..RC__identify(nextItem)..".") -->
				<!-- end -->
			<!-- end -->
		
		<CustomAttribute DataType="String" Name="ContactWireNameDisplay" DisplayName="Ledningsnavn visning" DefaultValue="" 
			Description="The cantilever's associated OCS wire. Uses relation '&quot;..rel_Cantilever_Holds_ContactWire..&quot;' to access the related object's data." />
        <TextAttribute Annotative="true" BindingProperty="ContactWireNameDisplay" CadAttributeTag="UTLIGGER_LEDNING" X="0" Y="-6" 
				Layer="JBTEH@UTLIGGER_LEDNING" Justify="MiddleCenter" Height="0.9" Width="0" Rotation="0" ObliqueAngle="0" Constant="false" 
				Invisible="false" Lock="false" MText="false" /> 

		<LuaExpression Name="ContactWireNameDisplay" ><Formula>_JBTEH_UTL_ContactWireNameDisplay()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_ContactWireNameDisplay()" 
			ReturnType="String"
			Description="Identifies this cantilever's associated OCS wire. Uses relation '&quot;..rel_Cantilever_Holds_ContactWire..&quot;' to access the related object's data." >
			<Constructor>String _JBTEH_UTL_ContactWireNameDisplay(cantilever)</Constructor>
			<Formula>
				function _JBTEH_UTL_ContactWireNameDisplay(cantilever)
					if cantilever == nil then cantilever = this end
					if cantilever.RcType ~= rctype_Cantilever then
						return nil, _info("Unrecognised calling object type ["..cantilever.RcType.."].")
					end
					s = rel_Cantilever_Holds_ContactWire
					r,n = getRelatedObjects(s)
					if n == 1 then return 
						RC__identify(r[0])
					else
						return "CW=?"
					end		
				end
			</Formula>
		</LuaFunction>
		
		<CustomAttribute DataType="Double" Name="WireClampLateralOffset" DisplayName="Kontakttråd sideavsett" DefaultValue="0.00" 
			Description="The contact wire clamp's lateral offset (wclo) [m] denotes the horizontal distance from the track's gradient curve (XYZ before cant effects) to the contact wire clamp (center of contact wire). It depends on contact wire height, stagger (zigzag) and track cant." />
		<LuaExpression Name="WireClampLateralOffset" ><Formula>_JBTEH_UTL_WireClampLateralOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_WireClampLateralOffset()" 
			ReturnType="String"
			Description="Returns the horizontal offset from the track's gradient curve (before cant) to the cantilever's associated OCS wire, taking contact wire height, stagger and track cant into consideration." >
			<Constructor>String _JBTEH_UTL_WireClampLateralOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_WireClampLateralOffset()
					--TODO: Adapt function to dual cant.
					ai = getAlignmentInfo()
					c = ai.Cant
					h = RC__isNan(c) and 0 or c/1000.0
					if h == 0 then 
						return (LeftSided and 1 or -1)*Stagger
					else
						ss = h/Alignment.AlignmentSystem.CantGauge --sin(theta)
						cc = math.sqrt(1 - ss^2) --cos(theta)
						return RC__round((ai.CantRotation == "CW" and 1 or -1)*ss*ContactWireHeight + (LeftSided and 1 or -1)*cc*Stagger,3)
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="WireClampVerticalOffset" DisplayName="Kontakttråd høydeavsett" DefaultValue="0.00" 
			Description="The contact wire clamp's vertical offset (wcvo) [m] denotes the vertical distance from the track's gradient curve (XYZ before cant effects) to the contact wire clamp (center of contact wire). It depends on contact wire height, stagger (zigzag), cant and the cantilever being LeftSided or RightSided." />
		<LuaExpression Name="WireClampVerticalOffset" ><Formula>_JBTEH_UTL_WireClampVerticalOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_WireClampVerticalOffset()" 
			ReturnType="String"
			Description="Returns the vertical offset from the track's gradient curve (before cant) to the cantilever's associated OCS wire, taking contact wire height, stagger, track cant and cantilever side-of-track into consideration." >
			<Constructor>String _JBTEH_UTL_WireClampVerticalOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_WireClampVerticalOffset()
					--TODO: Adapt function to dual cant.
					ai = getAlignmentInfo()
					c = ai.Cant
					h = RC__isNan(c) and 0 or c/1000.0
					if h == 0 then 
						return RC__round(ContactWireHeight,3)
					else
						ss = h/Alignment.AlignmentSystem.CantGauge --sine
						cc = math.sqrt(1 - ss^2) --cosine
						return RC__round(h/2 + cc*ContactWireHeight + (ai.CantRotation == "CW" and -1 or 1)*ss*Stagger,3)
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CatenaryClampLateralOffset" DisplayName="Bæreline sideavsett" DefaultValue="0.00" 
			Description="The catenary clamp's lateral offset (cclo) [m] denotes the horizontal distance from the track's gradient curve (XYZ before cant effects) to the catenary clamp (center of catenary wire). We assume that it is situated at the system height, straight above the contact wire clamp." />
		<LuaExpression Name="CatenaryClampLateralOffset" ><Formula>_JBTEH_UTL_CatenaryClampLateralOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CatenaryClampLateralOffset()" 
			ReturnType="String"
			Description="Returns the horizontal offset from the track's gradient curve (before cant) to the cantilever's associated OCS catenary wire, assuming that it is situated at the system height, straight above the contact wire clamp.\n\nWe assume that the catenary/contact wire is a vertical wire suspension system, also for curves with large cant." >
			<Constructor>String _JBTEH_UTL_CatenaryClampLateralOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_CatenaryClampLateralOffset()
					return WireClampLateralOffset
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="CatenaryClampVerticalOffset" DisplayName="Bæreline høydeavsett" DefaultValue="0.00" 
			Description="The catenary clamp's vertical offset (ccvo) [m] denotes denotes the vertical distance from the track's gradient curve (XYZ before cant effects) to the catenary wire clamp (center of catenary wire). We assume that it is situated at the system height, straight above the contact wire clamp." />
		<LuaExpression Name="CatenaryClampVerticalOffset" ><Formula>_JBTEH_UTL_CatenaryClampVerticalOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_CatenaryClampVerticalOffset()" 
			ReturnType="String"
			Description="Returns the vertical offset from the track's gradient curve (before cant) to the cantilever's associated OCS catenary wire, assuming that it is situated at the system height, straight above the contact wire clamp.\n\nWe assume that the catenary/contact wire is a vertical wire suspension system, also for curves with large cant." >
			<Constructor>String _JBTEH_UTL_CatenaryClampVerticalOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_CatenaryClampVerticalOffset()
					return WireClampVerticalOffset + SystemHeight
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Enumeration" Name="DropperWireMaterial" DisplayName="Hengetråd materiale" DefaultValue=""
			Description="The overhead catenary system (OCS) dropper wire material." 
		>
			<Values>
				<Value>None</Value>
				<Value>Bz II 10/49</Value>
			</Values>
		</CustomAttribute>
		<LuaExpression Name="DropperWireMaterial" ><Formula>_JBTEH_UTL_DropperWireMaterial()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_DropperWireMaterial()" ReturnType="String"
			Description="Obtains the standard stitch wire material according to OCS system." >
			<Constructor>String _JBTEH_UTL_DropperWireMaterial()</Constructor>
			<Formula>
				function _JBTEH_UTL_DropperWireMaterial()
					return NOBN_ocs_getCantileverStandardValues()["drMat"]
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Enumeration" Name="StitchWireMaterial" DisplayName="Y-line materiale" DefaultValue=""
			Description="The overhead catenary system (OCS) stitch wire material." 
		>
			<Values>
				<Value>None</Value>
				<Value>Bz II 25/7</Value>
				<Value>Bz II 35/7</Value>
			</Values>
		</CustomAttribute>
		<LuaExpression Name="StitchWireMaterial" ><Formula>_JBTEH_UTL_StitchWireMaterial()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_StitchWireMaterial()" ReturnType="String"
			Description="Obtains the standard stitch wire material according to OCS system." >
			<Constructor>String _JBTEH_UTL_StitchWireMaterial()</Constructor>
			<Formula>
				function _JBTEH_UTL_StitchWireMaterial()
					return NOBN_ocs_getCantileverStandardValues()["swMat"]
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="Double" Name="AddVisual2dAngularOffset" DisplayName="2D vinkeltillegg" DefaultValue="0" 
			Description="The 'AddVisual2dAngularOffset' [Double] adds 16.7 decimal degrees to the 2D symbol's angle. Cantilevers mounted in a portal or gantry will not be visible unless the 2D symbol is given an extra angle." />
		<LuaExpression Name="AddVisual2dAngularOffset" ><Formula>_JBTEH_UTL_AddVisual2dAngularOffset()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_AddVisual2dAngularOffset()" 
			ReturnType="Double"
			Description="Adds 17 Decimal Degrees rotation to the cantilever's angle in 2D whenever it is located in a portal or in a gantry, to make it visible in 2D drawings. AngularOffset and 3D rendering are not affected" >
			<Constructor>Double _JBTEH_UTL_AddVisual2dAngularOffset()</Constructor>
			<Formula>
				function _JBTEH_UTL_AddVisual2dAngularOffset()
					s = rel_Cantilever_BelongsTo_OcsPole
					r,n = getRelatedObjects(s)
					if n == 0 then
						return 0, _info("UNFINISHED - Relate cantilever to an OCS pole, portal drop arm or tunnel / bridge drop arm.")
					else 
						--Cantilever mounted under portal?
						--Make cantilever "rod" visible if located under a portal, by visually adding 17 degrees:
						pol = r[0]
						r1,n1 = pol:getRelatedObjects(rel_OcsPole_IsSupportFor_OcsPortal)
						if n1 == 0 then 
							return 0, _info("No visual angular offset added since cantilever is not mounted on a drop arm (hidden by a portal).")
						else
							-- TODO: Detect if cantilever is located on the other side of one of the portal's support poles - and not under the next portal, if another portal continues...
							return 17, _info("Visual angular offset added since cantilever might otherwise be visually hidden under a portal.")
						end
					end
				end
			</Formula>
		</LuaFunction>

		<!-- Text attributes and their positions -->
		<TextPositionLuaExpression Name="UTLIGGER_LEDNING" ><Formula>_JBTEH_UTL_TextAttributeAcsPosition(-9,-4)</Formula></TextPositionLuaExpression>
		<TextPositionLuaExpression Name="SIKKSAKK" ><Formula>_JBTEH_UTL_TextAttributeAcsPosition(-11,-4)</Formula></TextPositionLuaExpression>
		<TextPositionLuaExpression Name="OBJEKTNAVN" ><Formula>_JBTEH_UTL_TextAttributeAcsPosition(-14,-4)</Formula></TextPositionLuaExpression>
		<TextPositionLuaExpression Name="OBJEKTID" ><Formula>_JBTEH_UTL_TextAttributeAcsPosition(-16,-4)</Formula></TextPositionLuaExpression>
		<TextPositionLuaExpression Name="OBJEKTINFO" ><Formula>_JBTEH_UTL_TextAttributeAcsPosition(-18,-4)</Formula></TextPositionLuaExpression>

		<LuaFunction Name="_JBTEH_UTL_TextAttributeAcsPosition()" ReturnType="Vector2D" 
				HideFromUser="false"
				Description="Returns a World Coordinate System offset vector in the current drawing scale for a text attribute, placed according to there being 1, 2, 3 or 4 cantilevers. Input coordinates provide the acsX = lateral offset (positive to the right side of the object's alignment) and acsY = the longitudinal offset (positive in the direction of increasing mileages), both stated for drawing scale 1:1 (1:1000)." >
			<Constructor>{Double,Double} _JBTEH_UTL_TextAttributeAcsPosition(Double lateralOffset, Double longitudinalOffset)</Constructor>
			<Formula>
				function _JBTEH_UTL_TextAttributeAcsPosition(lateralOffset,longitudinalOffset)
					scale = DocumentData.Document.Database.Cannoscale.Scale --CAD system's annotative scale
					lateralOffset = (lateralOffset or 5)/scale
					longitudinalOffset = (longitudinalOffset or 0)/scale
					--Place text as a function of rightsided/leftsided, and move sideways if two cantilevers on same side of OCS pole: 
					sPole = rel_HvSwitch_IsInstalledOn_OcsPole
					rPoles,nPoles = getRelatedObjects(sPole)
					sCantilever = rel_OcsPole_Has_Cantilever
					rCantilevers,nCantilevers = getRelatedObjects(sCantilever,rPoles[0])

					if nCantilevers == 1 then
						--(it is always at least 1...)
						return RC__getWcsVectorFromAcsVector(
							RightSided and lateralOffset or -lateralOffset, 
							RightSided and -longitudinalOffset or longitudinalOffset)

					else
						--Two or more cantilevers: count them and separate them in left-sided and rightsided, count each side.
						nRightSided = 0 --Cantilevers placed to the right of its own alignment, regardless of what alignment the OCS pole has.
						for i = 0,nCantilevers-1 do
							if rCantilevers[i].RightSided then
								nRightSided = nRightSided + 1
							end
						end
						index = 1 --Sort the cantilevers on the same side as 'this' cantilever
						for i = 0,nCantilevers-1 do
							Cantilever = rCantilevers[i]
							if (this.id ~= Cantilever.id) and (this.SideOfAlignment == Cantilever.SideOfAlignment) then
								if this.ReferenceMileage &gt; Cantilever.ReferenceMileage then
									index = index + 1
								end
							end
						end
						return RC__getWcsVectorFromAcsVector(
							RightSided and lateralOffset or -lateralOffset,
							index == 1 and longitudinalOffset or -longitudinalOffset)
					end
				end
			</Formula>
		</LuaFunction>
		

		<!-- 3D rendering -->
		<LuaExpression Name="Geometry3D_0.Name" ><Formula>_JBTEH_UTL_Geometry3DName(CantileverLengthDisplay)</Formula></LuaExpression>
		<!-- Note: The argument "0" to ..._trk_getYawFromDir(0) forces RC to use 0 angular offset instead of something else for cantilevers in portals -->
		<LuaExpression Name="Geometry3D_0.Rotation3D.Z" ><Formula>NOBN_trk_getYawFromDir(0.0)</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_Geometry3DName()" 
			ReturnType="String"
			Description="Returns cantilever's 3D model name, based on its OCS pole's type, push/pull setting and cantilever's length [mm]." >
			<Constructor>String _JBTEH_UTL_Geometry3DName(int CantileverLengthDisplay)</Constructor>
			<Formula>
				function _JBTEH_UTL_Geometry3DName(CantileverLengthDisplay)
				CantileverLengthDisplay = CantileverLengthDisplay or 4000 --Default is 4m from insertion point to CW wire clamp
				--[[
					--TODO: Lage flere 3D-modeller for alle utligger-varianter.
					--TODO: ...men siden 20, 25 og 35 er veldig like, så bruker vi S20 som 3D-modell for alle sammen inntil videre.
					if (Variant == "S20A") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					if (Variant == "S20AR") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "S20B") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "S20BR") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "S20C1") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "S20C2") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "S25") then 
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == 'S35') then
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == 'S35MS') then
						if (PushDirection == "Pull") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-"..CantileverLengthDisplay
						elseif (PushDirection == "Push") then return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-"..CantileverLengthDisplay
						else return "Ukjent Kraftretning ["..PushDirection.."]",_warning
						end
					elseif (Variant == "Cariboni") then
						return "NO-BN-3D-EH-UTL-UTLIGGER-CARIBONI"
					elseif (Variant == "TET08") then
						return "NO-BN-3D-EH-UTL-UTLIGGER-TET08"
					else
						return "Ukjent Variant ["..Variant.."].",_warning
					end
				--]]
					if (Variant == "Cariboni") then
						return "NO-BN-3D-EH-UTL-UTLIGGER-CARIBONI"
					elseif (Variant == "TET08") then
						--TODO: Create TET08 3D model in 3D library:
						return "NO-BN-3D-EH-UTL-UTLIGGER-TET08"
					else
						--The remaining variants must feature a push or pull:
						if (PushDirection == "Push") then	
							--Just an example - fits only ONE cantilever length...:
							return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-TRYKK-L3706-V1690-SH1768"
						elseif (PushDirection == "Pull") then
							--Just an example - fits only ONE cantilever length...:
							return "NO-BN-3D-EH-UTL-UTLIGGER-SYSTEM-20-STREKK-L2895-V1693-SH1776"
						else
							return "Ingen 3D-modell er forberedt i DNA for variant ["..Variant.."] eller kraftretning ["..PushDirection.."]", _warning
						end
					end
				end
			</Formula>
		</LuaFunction>


		<!-- Model checks -->
		<CustomAttribute DataType="String" Name="mc_OcsSystemHeight" DisplayName="Systemhøyde" 
			ReadOnly="true" Category="Model check" 
			Description="Check that cantilever system height (sh) [m] conforms to Technical Regulations for the chosen Variant / SubVariant."
		 />
		<LuaExpression Name="mc_OcsSystemHeight" IsModelCheck="true" ><Formula>_JBTEH_UTL_chkSystemHeight()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_chkSystemHeight()" 
			ReturnType="String"
			Description="Checks the cantilever's height as a function of selected OCS system variant's min and max heights." >
			<Constructor>String _JBTEH_UTL_chkSystemHeight()</Constructor>
			<Formula>
				function _JBTEH_UTL_chkSystemHeight()
					min = NOBN_ocs_getCantileverStandardValues(Variant)["shmin"]
					max = NOBN_ocs_getCantileverStandardValues(Variant)["shmax"]
					sh = SystemHeight
					v = Variant
					if sh &lt; min then
						return string.format("%.02f: WARNING - system height is below %s limit (%.02f).",sh,v,min),_warning
					elseif sh &gt; max then
						return string.format("%.02f: WARNING - system height is above %s limit (%.02f).",sh,v,max),_warning
					else
						return string.format("%.02f: OK - system height is within %s limits [%.02f-%0.2f].",sh,v,min,max),_ok
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="String" Name="mc_OcsUpperTubeAngle" DisplayName="Strekkstagvinkel" 
			ReadOnly="true" Category="Model check" 
			Description="The cantilever upper tube's angle [DD] above the horizontal position. We assume that the catenary wire clamp is situated 11 cm above the center of the upper tube."
		 />
		<LuaExpression Name="mc_OcsUpperTubeAngle" IsModelCheck="true" ><Formula>_JBTEH_UTL_chkUpperTubeAngle()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_chkUpperTubeAngle()" 
			ReturnType="String"
			Description="Checks that the cantilever upper tube's angle [DD] is near zero (except for the lifted wire at wire changeovers). We assume that the catenary wire clamp is situated 11 cm above the center of the upper tube." >
			<Constructor>String _JBTEH_UTL_chkUpperTubeAngle()</Constructor>
			<Formula>
				function _JBTEH_UTL_chkUpperTubeAngle()
					-- Assume that the catenary wire clamp holds the catenary 11.7 cm above the upper tube's center:
					vDiff = CatenaryClampVerticalOffset - 0.117 - RelativeElevation
					hDiff = math.abs(CatenaryClampLateralOffset - DistanceToAlignment)
					angle = math.deg(math.atan(vDiff,hDiff))
					min = -5.0 --Decimal Degrees
					max = 5.0 --Decimal Degrees
					if angle &lt; min then
						return string.format("%.01f: WARNING - upper tube angle is below low limit (%.01f DD).",angle,min),_warning
					elseif angle &gt; max then
						return string.format("%.01f: WARNING - upper tube angle is above high limit (%.01f DD).",angle,max),_warning
					else
						return string.format("%.01f: OK - system height is within limits [%.01f  to %0.1f DD].",angle,min,max),_ok
					end
				end
			</Formula>
		</LuaFunction>

		<CustomAttribute DataType="String" Name="mc_OcsCantileverSequence" DisplayName="Utligger- og avspenningsekvens" 
			ReadOnly="true" Category="Model check" 
			Description="Each cantilever shall feature exactly one preceding cantilever (but the first one is preceded by a wire tensioning balancer), and shall be followed by exactly one cantilever (but the last one is followed by a wire tensioning balancer)."
		 />
		<LuaExpression Name="mc_OcsCantileverSequence" IsModelCheck="true" ><Formula>_JBTEH_UTL_chkCantileverSequence()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_UTL_chkCantileverSequence()" 
			ReturnType="String"
			Description="Checks the cantilever sequence: Preceded and followed by exactly one cantilever (or wire tension balancer)." >
			<Constructor>String _JBTEH_UTL_chkCantileverSequence()</Constructor>
			<Formula>
				function _JBTEH_UTL_chkCantileverSequence()
					sPrev = rel_CantileverOrWtb_HasPrevious_CantileverOrWtb
					rPrev,nPrev = getRelatedObjects(sPrev)
					sNext = rel_CantileverOrWtb_HasNext_CantileverOrWtb
					rNext,nNext = getRelatedObjects(sNext)
					if nPrev == 1 and nNext == 1 then
						return string.format("%d / %d: OK - Preceded by %s '%s' / followed by %s '%s'.", nPrev,nNext,
								rPrev[0].RcType == this.RcType and "cantilever" or "wire tension balancer", RC__identify(rPrev[0]),
								rNext[0].RcType == this.RcType and "cantilever" or "wire tension balancer", RC__identify(rNext[0])
							),_ok
					elseif nPrev == 0 and nNext == 0 then
						return _unfinished,string.format("UNFINISHED - Relate to preceding / following cantilever (or wire tension balancer) with '%s' / '%s'.",sPrev,sNext)
					elseif nPrev == 0 and nNext == 1 then
						return _unfinished,string.format("UNFINISHED - Relate to preceding cantilever (or wire tension balancer) with '%s'.",sPrev)
					elseif nPrev == 1 and nNext == 0 then
						return _unfinished,string.format("UNFINISHED - Relate to following cantilever (or wire tension balancer) with '%s'.",sNext)
					else
						return _warning,string.format("%d / %d: ERROR - Too many related cantilevers (or wire tension balancers), remove the wrong ones or check construction phase settings and refresh the object.", nPrev,nNext)
					end
				end
			</Formula>
		</LuaFunction>

		<!-- Extra functions, for use when the wire clamps have been provided based on survey data. -->
		<!-- Use these functions to compute contact wire height and stagger "backwards". -->
		<LuaFunction Name="_JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()" 
			ReturnType="String"
			Description="Returns the Contact Wire Height (measured perpendicularly above the rolling plane), computed from a surveyed contact wire clamp related with '&quot;..rel_Cantilever_Has_OcsWireClamp..&quot;'." >
			<Constructor>String _JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()</Constructor>
			<Formula>
				function _JBTEH_UTL_getContactWireHeightFromRelatedContactWireClamp()
					s = rel_Cantilever_Has_OcsWireClamp
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						p = r[0].geoCoord --CW clamp coordinates in WCS
						ai = getAlignmentInfo(p.X,p.Y) --Project CW clamp onto the cantilever's alignment
						h = (ai.Cant or 0) / 1000.0 --[m] Could be nil
						H = p.Z - (ai.Point.Z + h/2) --survey point Z relative to this track's center track after cant
						d = ai.DistanceToAlignment
						ss = h / Alignment.AlignmentSystem.CantGauge -- equals the sine of the cant angle
						ss = ss * (ai.CantRotation == "CW" and 1 or -1)
						cc = math.sqrt(1 - ss^2) --the cosine
						cwh = ss*d + cc*H
						return cwh --Intended for the ContactWireHeight property
					end
				end
			</Formula>
		</LuaFunction>

		<LuaFunction Name="_JBTEH_UTL_getStaggerFromRelatedContactWireClamp()" 
			ReturnType="String"
			Description="Returns the Stagger (measured colinearly to the rolling plane), computed from a surveyed contact wire clamp related with '&quot;..rel_Cantilever_Has_OcsWireClamp..&quot;'." >
			<Constructor>String _JBTEH_UTL_getStaggerFromRelatedContactWireClamp()</Constructor>
			<Formula>
				function _JBTEH_UTL_getStaggerFromRelatedContactWireClamp()
					s = rel_Cantilever_Has_OcsWireClamp
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						p = r[0].geoCoord --CW clamp coordinates in WCS
						ai = getAlignmentInfo(p.X,p.Y) --Project CW clamp onto the cantilever's alignment
						h = (ai.Cant or 0) / 1000.0 --[m] Could be nil
						H = p.Z - (ai.Point.Z + h/2) --survey point Z relative to this track's center track after cant
						d = ai.DistanceToAlignment
						ss = h / Alignment.AlignmentSystem.CantGauge -- equals the sine of the cant angle
						cc = math.sqrt(1 - ss^2) --the cosine
						zigzag = (ss*H - cc*d) * (RightSided and 1 or -1)
						return zigzag --Intended for the Stagger property
					end
				end
			</Formula>
		</LuaFunction>

		<InsertPointObject VariantName="S25" DisplayName="System 25" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-25-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20A" DisplayName="System 20A" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20A-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20AR" DisplayName="System 20A redusert" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20A-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20B" DisplayName="System 20B" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20B-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20BR" DisplayName="System 20B redusert" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20B-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20C1" DisplayName="System 20C1" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20C-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S20C2" DisplayName="System 20C2" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20C-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S35" DisplayName="System 35" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-35-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="S35MS" DisplayName="System 35MS" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-35-S-4000-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="CantileverLength" Value="4.0" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="Cariboni" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-CARIBONI-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="1.2" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="PushDirection" Value="Strekk" />
			<SetValue Key="CantileverLength" Value="1.2" />
		</InsertPointObject>
		
		<InsertPointObject VariantName="TET08" DisplayBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-TET08-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="1.001" >
			<OwnAlignmentTargetSpace>spor</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="0" RotateIfRightSideOfAlignment="true" />
			<SetValue Key="PushDirection" Value="Strekk" />
			<SetValue Key="CantileverLength" Value="1.001" />
		</InsertPointObject>
		
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTEH_UTL-UTLIGGER-20B-{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset|plus:AddVisual2dAngularOffset}}
														{% else %}45.0
														{% endif %}" />	
			<BlockNameFormat JoinBy="-" >
				NO-BN-2D-JBTEH_UTL-UTLIGGER
				{% if Variant == 'S20A' %}20A{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S20AR' %}20A{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S20B' %}20B{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S20BR' %}20B{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S20C1' %}20C{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S20C2' %}20C{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S25' %}25{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S35' %}35{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'S35MS' %}35{% if PushDirection == 'Pull' %}-S{% else %}-T{% endif %}-{{CantileverLengthDisplay}}
				{% elsif Variant == 'Cariboni' %}CARIBONI
				{% elsif Variant == 'TET08' %}TET08
				{% else %}BAD_Variant_{{Variant}}
				{% endif %}
				{% if SymbolMode == 'Schematic' %}Schematic{% else %}Metric{% endif %}
			</BlockNameFormat>
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" DoNotIncludeInSymbolFrame="true" />
	
	</ObjectType>



<!--========================================================================================================
	HIGH VOLTAGE
	OVERHEAD CATENARY SYSTEM WIRE CLAMP
=========================================================================================================-->
	<ObjectType DataType="tOrientedElement" Class="RailwayPlacedObject" EulynxDataType="EULYNX.sig.Fixing" LuaName="rctype_ContactWireClamp" Name="JBTEH_KLK Kontakttrådklemme"
				Layer="JBTEH_KLK" Color="ByLayer"
				Group="Kontaktledning/Klemmer"
				AttMirrorY="{% if RightSided %}true{% else %}false{% endif %}"
				>
				
		<RelationSpace>kontakttrådklemme</RelationSpace>

		<!-- <xpp:expand select="NOBN_xxx_DEPRECATED_MACRO___TO_BE_REMOVED" /> -->
		<xpp:expand select="NOBN_com_SYMBOLFRAME" />
		<xpp:expand select="NOBN_com_STD_CUSTOMATTRIBUTES___ANGULAROFFSET_VAR" />
		<xpp:expand select="NOBN_com_STD_TEXATTRIBUTES___VERTICAL_AND_FAR___OCS" />
		<xpp:expand select="NOBN_com_DISCIPLINE___OCS" />
		<xpp:expand select="NOBN_com_CHK_NUMBER_OF_OCP_AREAS" />
		<xpp:expand select="NOBN_com_SET_OCP_STATION_REFERENCE" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___WAYSIDE_GENERAL_OBJECT" />
		<xpp:expand select="NOBN_com_STD_LUAEXPRESSIONS___EARTHED_TO_NONE" />
		<xpp:expand select="NOBN_com_PSET_BANE_NOR" />
		<xpp:expand select="NOBN_com_PSET_FDV_BANEDATA" />
		<xpp:expand select="NOBN_com_PSET_ISY_STK" />
		<xpp:expand select="NOBN_com_PSET_TITTELFELT" />

		<Variants DefaultValue="Kontakttrådklemme" >
			<Variant Name="Kontakttrådklemme" >
				<SetValue Key="name" Value="Tr.kl." />
				<!-- <SetValue Key="Geometry3D_0.Name" Value="NO-BN-3D-EH-KLK-KONTAKTTRÅDKLEMME" /> -->
				<SetValue Key="Geometry3D_0.Name" Value="NO-BN-3D-EH-KLK-KONTAKTTRÅDKLEMME" />
			</Variant>
		</Variants>

		<SetDynamicProperty Type="Representation" Subtype="Geometry3D" />

		<LuaExpression Name="code" ><Formula>_JBTEH_KLK_code()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_code()" 
			ReturnType="String"
			Description="Copies the cantilever's code."
		>
			<Constructor>String _JBTEH_KLK_code()</Constructor>
			<Formula>
				function _JBTEH_KLK_code()
					s = rel_OcsWireClamp_BelongsTo_Cantilever
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].code
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="Alignment" ><Formula>_JBTEH_KLK_Alignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_Alignment()" 
			ReturnType="String"
			Description="Obtains the 'Alignment' property for this OCS contact wire clamp, deduced via its cantilever." >
			<Constructor>String _JBTEH_KLK_Alignment()</Constructor>
			<Formula>
				function _JBTEH_KLK_Alignment()
					s = rel_OcsWireClamp_BelongsTo_Cantilever
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].Alignment
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="Mileage" ><Formula>_JBTEH_KLK_Mileage()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_Mileage()" 
			ReturnType="Double"
			Description="Returns contact wire clamp's reference mileage, equal to its cantilever's reference mileage." >
			<Constructor>Double _JBTEH_KLK_Mileage()</Constructor>
			<Formula>
				function _JBTEH_KLK_Mileage()
					s = rel_OcsWireClamp_BelongsTo_Cantilever
					r,n = getRelatedObjects(s)
					if n == 0 then
						return _info("INCOMPLET - Relier par '"..s.."' à son armement.")
						--return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].Mileage
					end
				end
			</Formula>
		</LuaFunction>
		
		<LuaExpression Name="DistanceToAlignment" ><Formula>_JBTEH_KLK_DistanceToAlignment()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_DistanceToAlignment()" 
			ReturnType="Double"
			Description="Copies the cantilever's lateral offset (distance to alignment)." >
			<Constructor>Double _JBTEH_KLK_DistanceToAlignment()</Constructor>
			<Formula>
				function _JBTEH_KLK_DistanceToAlignment()
					s = rel_OcsWireClamp_BelongsTo_Cantilever
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].DistanceToAlignment
					end
				end
			</Formula>
		</LuaFunction>

		<LuaExpression Name="RelativeElevation" ><Formula>_JBTEH_KLK_RelativeElevation()</Formula></LuaExpression>
		<LuaFunction Name="_JBTEH_KLK_RelativeElevation()" 
			ReturnType="Double"
			Description="Copies the cantilever's vertical offset (relative elevation)." >
			<Constructor>Double _JBTEH_KLK_RelativeElevation()</Constructor>
			<Formula>
				function _JBTEH_KLK_RelativeElevation()
					s = rel_OcsWireClamp_BelongsTo_Cantilever
					r,n = getRelatedObjects(s)
					if n == 0 then
						return "UNFINISHED - Relate with '"..s.."' to its cantilever."
					else
						return r[0].RelativeElevation
					end
				end
			</Formula>
		</LuaFunction>
		
		<InsertPointObject VariantName="Kontakttrådklemme" DisplayBlockName="NO-BN-2D-JBTRC_THUMBNAIL-USPESIFISERT-{{SymbolMode}}" 
				DefaultSnapMode="Point" SnapToAlignment="true" SnapDistance="4e-4" >
			<OwnAlignmentTargetSpace>kontaktledning</OwnAlignmentTargetSpace>
			<JigSymbolAppearance AddAngle="-90" EnableDirectionSetting="true" />
		</InsertPointObject>
		
		<!-- <SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTEH-KLEMPUNKT-KONTAKTTRAADKLEMME" > -->
		<SymbolDefinition AllowSymbolMove="true" DefaultBlockName="NO-BN-2D-JBTRC_THUMBNAIL-USPESIFISERT-{{SymbolMode}}" >
			<Rotation Add180DegreesIfDirIsDown="false" AddAngle="{% if dir == 'up' %}{{270.0|plus:AngularOffset}}
														{% elsif dir == 'down' %}{{90.0|plus:AngularOffset}}
														{% elsif dir == 'both' and RightSided %}{{180.0|plus:AngularOffset}}
														{% elsif dir == 'both' and LeftSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and RightSided %}{{0.0|plus:AngularOffset}}
														{% elsif dir == 'none' and LeftSided %}{{180.0|plus:AngularOffset}}
														{% else %}45.0
														{% endif %}" />	
		</SymbolDefinition>
		
		<SymbolDefinition DefaultBlockName="NO-BN-2D-JBTRC_INNSETTINGSPUNKT-Schematic" DoNotIncludeInSymbolFrame="true" />

		<DockPointDefinitions>
			<SnapPoints>
				<SnapPoint X="0.0" Y="0.0" TargetSpace="utligger" />
			</SnapPoints>
		</DockPointDefinitions>

	</ObjectType>



<!--========================================================================================================
    End of file 
=========================================================================================================-->
</xpp:bloc>
