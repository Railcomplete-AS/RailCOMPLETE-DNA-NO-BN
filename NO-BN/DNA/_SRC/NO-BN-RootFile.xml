<?xml version="1.0" encoding="utf-8"?>
<RailwayObjectTypeDefinitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<!--========================================================================================================

    NO-BN-DnaRootFile.xml
	
	Definition of Network Assets for Bane NOR, Norway (NO-BN).
	
	Main DNA file using XPPq XML preprocessor directive <xpp:expand href="fileName.xml"/> to include other 
	partial DNA files and expand macros.

	Developed by RailCOMPLETE agent: NOR.0001 = Railcomplete AS, Oslo, Norway

	(c) Railcomplete AS, Norway, 2015-2023. All rights reserved.
	
=========================================================================================================-->

<!--========================================================================================================
	DNA VERSION and DNA Description
=========================================================================================================-->
	<DnaIdentification Name="NO-BN 2023.a (alpha 2023-07-24T00:00:00+01:00)">
		<DnaIri>  
			<AdministrationCountry>NO</AdministrationCountry>
			<AdministrationDelimiter>-</AdministrationDelimiter>
			<AdministrationCode>BN</AdministrationCode>
			<AgentCountry>NO</AgentCountry>
			<AgentDelimiter>.</AgentDelimiter>
			<AgentCode>0001</AgentCode>
			<DateTime>2023-07-24T00:00:00+01:00</DateTime>
			<VersionNumber>2023.a</VersionNumber> 
		</DnaIri>
		<Description>RailCOMPLETE(r) Definisjon av nettverkselementer for Bane NOR</Description>
		<AdministrationName>Bane NOR SF</AdministrationName>
		<AgentName>Railcomplete AS</AgentName>
	</DnaIdentification>



<!--========================================================================================================
	DNA release notes
=========================================================================================================-->
	<ReleaseNotesFolder>..\NO-BN\ReleaseNotes</ReleaseNotesFolder>



<!--========================================================================================================
===
===		Note: Please use Notepad++ standard  indents (4 positions per TAB)
===
===		This file is NOT compliant to the regular schema for RailCOMPLETE DNA files, but is meant for
===		pre-processing using the EPEIOS open source XPPq XML preprocessor, made by Claude SIMON, France.
===		Please consult these links:
===
===		https://www.atlastk.com/computing/epeios/tools/xppq/home
===		https://www.atlastk.com/computing/epeios/tools/xppq/directives
===		
===		The XPPq directives are:
===		
===		<xpp:define name="NAME">…</xpp:define>: definition of a macro named NAME.
===		<xpp:expand select="NAME">…</xpp:expand>: expansion of the macro named NAME.
===		<UserTag xpp:attribute="ATTRIBUTE_NAME,MACRO_NAME">…</UserTag>: expansion of the macro 
===			named MACRO_NAME as value of an attribute named ATTRIBUTE_NAME.
===		<xpp:expand href="FILENAME"/>: inclusion of the content of the file named FILENAME.
===		<xpp:set Name="NAME" value="VALUE"/>: set the variable named NAME to the value VALUE.
===		<xpp:ifeq select="NAME" value="VALUE">…</xpp:ifeq>: the content of this directive is skipped 
===			unless variable named NAME has VALUE as value.
===		<xpp:cdata>…</xpp:cdata>: the content of this directive is put in a CDATA section.
===		<xpp:bloc>…</xpp:bloc>: this directive has no effect by itself, but is required under some 
===			circumstances by above directives (e.g., enclose everything in a NAME definition by bloc 
===			in order to expand it as one block later).
===		
===		By convention, The RailCOMPLETE DNA file has extension .XML, and the various XPPq preprocessor
===		source files also have extension .XML (in order for Notepad++ to choose the right Language).
===		
=========================================================================================================-->



<!--========================================================================================================
===		
===		General syntax for ObjectType element header prose descriptions in this DNA file:
===
===		MAIN_CATEGORY
===		SUBCATEGORY[/SUBCATEGORY]*
===		RcType
===		Optional description
===
=========================================================================================================-->



<!--========================================================================================================
===		
===		Note on folder addresses: The main application (RailCOMPLETE running under AutoCAD) includes the
===		file 'startup.xml' 
===		
=========================================================================================================-->



<!--========================================================================================================

	RailCOMPLETE Naming Conventions
	===============================

	Name structure for property names
	---------------------------------
	<propertyName>		--railML property.
	<PropertyName>		--non-railML property, either intrinsic to RC or declared in DNA.
	mc_<PropertyName>	--modelcheck property.
	
	
	Name structure for text attribute definitions
	---------------------------------------------
	<ATTDEF_NAME>		--Uppercased name with underscore '_' as word separator. Note that RC converts
						  underscore '_' to dash '-' in the GUI of the RC-EditTextAttribute command.

	
	Name structure for ordinary functions
	-------------------------------------
	RC__<actionObjectName>([arglist])					--No specific DNA or language involved inside function
	<ADM>_<discipline>_<actionObjectName>([arglist])	--Administration-dependent function
	<OBJECT_TYPE>_<PropertyName>([arglist])				--Global, shared by multiple object types
	_<OBJECT_TYPE>_<PropertyName>([arglist])			--Local to one object type


	Name structure for modelchecking functions
	------------------------------------------
	RC__chk<ModelFeatureToBeChecked>					--No specific DNA or language involved inside function
	<ADM>_<discipline>_<actionObjectName>([arglist])    --Administration-dependent function
	<OBJECT_TYPE>_<PropertyName>([arglist])             --Global, shared by multiple object types
	_<OBJECT_TYPE>_<PropertyName>([arglist])            --Local to one object type


	Name structure for constants
	----------------------------
	RC__<CONSTANT_NAME>()								--No specific DNA or language involved inside function
	<ADM>_<discipline>_<CONSTANT_NAME>()                --Administration-dependent function
	<OBJECT_TYPE>_<CONSTANT_NAME>()                     --Global, shared by multiple object types
	_<OBJECT_TYPE>_<CONSTANT_NAME>()                    --Local to one object type
	Constants must be written as functions, otherwise they would not be accessible in runtime from object's properties.
	
	
	Name structure for XPPq macros
	------------------------------
	RC__<MACRO_NAME>									--No specific DNA or language involved inside function
	<ADM>_<discipline>_<MACRO_NAME>                     --Administration-dependent function
	<OBJECT_TYPE>_<MACRO_NAME>                          --Global, shared by multiple object types
	_<OBJECT_TYPE>_<MACRO_NAME>                         --Local to one object type
	

	Prefix 'RC' or <ADM>
	--------------------
	RailCOMPLETE has an extensive Application Programming Interface (API). Functions contained in the API are generally
	named using actionObject() names, such as 'getRelatedObjects(...)'.
	
	To distinguish a Lua function declared in DNA from an intrinsic API function, we add a mandatory prefix
	to that function's name. The prefix tells us whether this function relies solely on intrisic features from RC, or if
	it depends on features found only in a specifi administration's DNA.

	A general RC function declared in Lua shall display these characteristics:
	- It does not address any resource which must be declared somewhere in the DNA (only inrinsic features are used).
	- It does not return a text string which is subject to translation into local language
	- Its purpose and name are generally recognized terms, not being subject to different interpretations by administrations.
	
	A general RC function's prefix is always 'RC__' (with a double underscore following the 'RC').
	
	A national RC function's prefix is the railway administration's <ADM> code, such as 'XXYY'. It consists of the country's
	ISO 3166-2 2-letter code in uppercase letters, followed by an uppercased abbreviation for the administration's name.
	
	Example of <ADM> administration codes
	-------------------------------------
	DEDB	Germany, DB Netz.
	FRSR	France, SNCF Réseau.
	JPTX	Japan, the Japanese Shinkansen consortium, adapted for the project 'Texas HiSpeedRail'.
	NOBN	Norway, Bane NOR.
	XXGL	A ficitious administration 'Genericland'.


	DISCIPLINE
	----------
	These are: (void) / com / sub / trk / cur / ocs / sig / pow / tel / bnp / otr

			(empty category) General RC functions, such as rounding numbers, format conversions etc, using intrinsic entities exclusively.
	com		Common - administration-specific issues, used by many disciplines.
	sub		Substructure (foundations, cable ducts, platforms, civil engineering: buildings, bridges, tunnels, roads).
	trk		Track and embankment - ballast, sleepers, rails, switches, crossings, buffer stops and other track related objects.
	cur		Traction current system, transformers above catenary voltage levels, power distribution system other than OCS.
	ocs		Overhead catenary system, High Voltage (HV) systems except for upper-level distribution systems (from 25kV approx. and down).
	sig		Signalling.
	pow		Power supply, except traction current system (low voltage, up to ca 1000V out to users, from 22kV public supplies or 15-25 kV railway HV).
	tel		Telecommunications.
	bnp		Boards and ('n) poles.
	otr		Other systems, if none of the above should fit. Usually not in use.


	ACTION - OBJECT NAME
	--------------------
	An action (get/export/compute/is/has/...) is written in lowercase letters. The following object name is 
	written in PascalCase. I.e., together they form a camelCased word. These are used as part of Lua function names.
	
	Example of typical use of an objectAction name:
	-----------------------------------------------
	DEDB_bnp_getBoardOrPoleName()		--The action is 'get', the object is 'BoardOrPoleName'.
	
	
	CONSTANTS
	-------------
	Lua does not support constants. If you really need something like a constant, then write a Lua function to return it.
	Such 'fake constant' names shall be written in all-uppercase, with underscore '_' as word separator.
	
	Constants for generic constants (not depending on any other DNA contents, but rather universal stuff shall be prefixed by 'RC__'.
	
	Constants declared specifically for one DNA shall be prefixed with the identity of the DNA's administration and the discipline in
	lower-case letters, and then the constant's name. This constitutes the name of a Subject, and not an ActionObject (as in Lua functions).

	Examples of constants:
	----------------------
	RC__COPYRIGHT_STATEMENT() 				--Returns a copyright message as a string.
	RC__EPSILON() 							--Returns a constant tolerance to be used in model checks
	NOBN_sig_NSS_DEFAULT_DECELERATION()		--Returns a default deceleration rate for the NOBN national signalling ATP system, in m/s^2.
	DEDB_ocs_CATENARY_STUFF_TABLE()			--Returns an entire table, e.g. {{3,5,8,13},{5,8,13,21}}.
	DEDB_ocs_CATENARY_STUFF_VALUE(2,4)		--Returns value 21 at the 2-dimensional index [2,4] into the 2-dimensional table {{3,5,8,13},{5,8,13,21}}.
	JBTSA_SIG_CLOSED_SIGNAL_ASPECT_CODE()	--Returns the string "Hs20", declared globally and being applicable to all signal objects with
											  object type names starting with "JBTSA_SIG" ("JBTSA_SIG Main signal", "JBTSA_SIG Track signal" etc)
	_JBTSA_TEL_MAX_DISTANCE_TO_TUNER()		--Returns the number '8' which is maximum distance from Bane NOR's axle counter to its tuning unit.
											  The leading underscore signifies that the declaration is local to that ObjectType 

	
	FUNCTIONS
	---------
	Functions expect a list of input arguments and return a list of results. In most cases a function returns just one value.

	A function may return a comma-separated list of values. Lua does assignment matching, such as in 'a,b,c,d = NOBN_com_computeValues()'.
	If a function returns fewer values than the assignment's left side is prepared for, then 'nil' will be assigned.
	If a function returns more values than the assignment's left side is prepared for, then the superfluous right side return values are ignored.
	
	Intrinsic functions, i.e. contained in the Lua API in RC, are generally named as 'actionObject()', such as in 'getRelatedObjects(...)'.
	
	A function, be it intrinsic or DNA-declared, may return a collection instead of a single value, as in 
	'r,n = getRelatedObjects(rel_Marker_AppliesTo_Anything)', where 'r' is a collection (of object references) and 'n' is a number
	(the number of object references in that collection).
	
	Functions which are declared in DNA but which are not using any feature or property than those which are always prsent, 
	regardless of the choice of DNA, shall start with 'RC__' and be followed by an underscore '_' and an actionObject name.
	
	Example - generic RC functions declared as Lua functions in DNA
	---------------------------------------------------------------
	RC__isNan(x)				--'Nan' (not a number) is usually written 'NaN', but we respect the PascalCase naming rule here.
	RC__round(math.pi,2)		--Special case, does not mention the object (which is obvious here - the object is a number).
	RC__chkNumberOfOcpAreas() 	--Implicitly, the object is 'this' or an explicitly given argument (an object reference).

	Such generic RC functions can easily be incorporated into the C# core application's API, and they probably will, after a burn-in
	period of use. It they are included in the API, then they will retain their actionObject() name, without the prefix 'RC__'.

	Functions which are declared globally in DNA (outside any object's ObjectType declaration) and which use features or properties
	declared in the DNA, including text messages, shall start with 'XXYY_xxx' and be followed by an underscore '_' and an 
	actionObject name, where 'XXYY' is the administration's abbreviation and 'xxx' is the applicable discipline.
	
	Example - global, DNA-dependent functions
	-----------------------------------------
	DEDB_trk_toKm(Mileage)							--Special case, 'to' implicitly means the action 'convertTo'.
	NOBN_com_getKof05Records()						--Returns a formatted multi-line text string.
	NOBN_com_getLabelItem1()						--Returns a formatted text string.
	NOBN_com_chkConnectionAlignmentCompatibility()	--See also 'modelcheck' fuctions elsewhere..
	
	Function XML definitions in DNA have these XML elements and attributes:
	<LuaFunction
		Name="RC__round()"
		ReturnType="String"                 (...or may be "Double" etc...)
		HideFromUser="false" 				(...or "true"...)
		Description="Rounds floating point input x to p [-6..6] decimal places. Default precision is 0 decimals."
	>
		<Constructor>Double RC__round(Double x [, Int p])</Constructor>
		<Formula>...your Lua formula goes here...</Formula>
	</LuaFunction>


	Example - Object-type specific functions
	----------------------------------------
	_JBTSA_TEL_code()			--Local object-dependent Lua function, inside the object type declaration for "JBTSA_TEL Tellepunkt" (axle
								  counter sensor). The function returns suitable contents for the 'code' property. To be called from 'code'.
								  Note that 'code' is written in camelCase because it was inherited from railML 2.3.

	JBTEH_SUP_AngularOffset()	--Global object-dependent Lua function, outside the three "JBTEH_SUP ...." object type declarations (straight-up
								  OCS support pole, drop-arm pole in portal or gantry, drop-arm pole from tunnel ceiling).
								  The function returns suitable contents for the 'Geometry3D_0.Layer3D' custom property.
								  Note that 'Layer3D' is written in PascalCase because it is intrinsic to the RC application and not from railML.

	JBTEH_SUP_Spanlength()		--Global object-dependent Lua function.
								  The function returns suitable contents for the 'Spanlength' custom property. To be called from 'Spanlength'.
								  Note that 'Spanlength' is written in PascalCase because it was added by RC (after railML) or added in DNA.

	The role of the leading underscore '_' is to show to the DNA designer or to the end-user that this function's scope is meant to be local to
	the named object type and not accessible from other object types.
	

	MODELCHECKS
	-----------
	Modelchecks are made up of two things: 
	- A custom property holding the result. This property must be declared with attribute IsModelCheck="true".
	- A modelchecking function which is called from its corresponding modelcheck property.
	
	A modelchecking function does a more or less thorough check of one aspect of your model, based on the object
	that is calling on the modelchecking function. The result being return is a text string, a classificaiton symbol and a
	collection of references to other objects that shall be checked (but not necessarily being refreshed).
	
	The name of a custom property used as a modelcheck shall start with the letters 'mc_' in lowercase, followed by
	a PascalCased subject (a noun), to be understood in its context inside an RC object's DNA declaration:
	
	mc_NumberOfOcpAreas					Count of the number of (visible) OCP areas currently surrounding the object.
	mc_Tangent							Checking the correspondence between own alignment and target alignment's tangent directions.
	mc_OtherObjectsToBeModelchecked		A special case, this one returns a list of other objects that will also be checked,
										for instance the closest upstream ad downstream axle counter(s).
	
	The name of a model checking function shall, in general, follow the naming convention for global and object-local Lua functions,
	where the action (the verb in the function's name) shall be 'chk':
	
	XXYY_trk_chkConnectionTangentMatch()

	A modelcheck function shall return a character string which is...:
	- starting with the assessment's main value (a string or a number, the main conclusion of that check)
	- followed by a colon ':' (or space+colon ' :' in French language)
	- followed by a space and one of the words OK / WARNING (AVERTISSEMENT, WARNUNG, ...) / ERROR (ERREUR, FEHLER, ...),
	- followed by space - dash - space (' - '),
	- followed by a full sentence starting with capital letter and erminated with a period '.',
	- followed by a RailCOMPLETE symbol
	
	The available RailCOMPLETE symbols are these:

	Symbols shown in the Property Manager:
	_error 			A white St.Andrew cross on a red disk
	_warning		A yellow warning triangle with a black exclamation mark '!' inside 
	_ok				A black checkmark 'v' on a green disk
	_unfinished		A white question mark '?' on a light blue disk
	_void			Nothing (this is the default value)
	
	Symbols shown in the Lua editor:
	_error			A white St.Andrew cross on a red disk
	_warning		A yellow triangle outline with an exlamation mark '!' inside
	_ok				A green checkmark
	_unfinished		A white question mark '?' on a light blue disk
	_void			Nothing (this is the default value)
	
	Example:
	A call to RC__chkNumberIsSmallEnough() where positive integer inputs 0, 1 or n >=2 will return these:
    "0: OK - Number is small.",_ok
	"1: WARNING - Number is barely acceptable.",_warning
    n..": ERROR - Number is unbearably large",_error

=========================================================================================================-->



<!--========================================================================================================
	Distance across screen when starting a new RailCOMPLETE document.
=========================================================================================================-->
	<DistanceAcrossScreenAtDocumentStart>420</DistanceAcrossScreenAtDocumentStart>
	<OwnAlignmentJigHighlightingGlobalWidthRelativeToScreenSize>0.003</OwnAlignmentJigHighlightingGlobalWidthRelativeToScreenSize>
	


<!--========================================================================================================
	Specifies to which number RC-QUANTIZEPOSITION rounds the position. Setting this number to 2.0
	would round the position to every even meter, setting it to 0.3048 would round to imperial feet, and so on.
=========================================================================================================-->
	<ShowPositionQuantizeRounding>1.0</ShowPositionQuantizeRounding>



<!--========================================================================================================
	Default stage pattern
=========================================================================================================-->
	<DefaultStagePattern>
		<Prefix></Prefix>
		<MainStageDigits>2</MainStageDigits>
		<SubStageDigits>2</SubStageDigits>
		<MainAndSubPartSeparator></MainAndSubPartSeparator>
		<StageSeparator>-</StageSeparator>
		<Suffix></Suffix>
	</DefaultStagePattern>



<!--========================================================================================================
	Geometrical considerations

	RightSideOfAlignmentPositive: If true: Alignment Coordinate System's X-axis extends to the right 
	when looking in the increasing Y-direction and Z pointing straight up, alignmed withj the World 
	coordinate system.

	TODO: Decide if RC continues to use X as forward or use Y as forward, X out to the left, as in IFC.
	
	ReferenceAlignmentProjectionMethod: Choice of reference alignment projection method. Given a 2D point in model space and an alignment, the chosen method decides which point on a reference alignment corresponds to that point.
    The following choices are available:
     - Default: Use default method specified in C# (TwoStep).
     - Direct: BaneNOR method. For a point close to an own alignment, it's reference alignment point is calculated by projecting it directly onto the reference alignment.
     - TwoStep: ISO method. For a point close to an own alignment, it's reference alignment point is calculated by first projecting it onto it's own-alignment, then from there onto the reference alignment.
=========================================================================================================-->
	<RightSideOfAlignmentPositive>true</RightSideOfAlignmentPositive>
	<ReferenceAlignmentProjectionMethod>Direct</ReferenceAlignmentProjectionMethod>
	<!--TODO Set max distance from the closest track such that an object will still snap to that track-->


	
<!--========================================================================================================
	Default paths and filenames
	
	Paths are either absolute, or relative to the administration home folder. 
	All paths may use Windows environment variables such as %HOMEPATH%. See this overview:	
	https://www.askvg.com/list-of-environment-variables-in-windows-xp-vista-and-7/
	%ADM% mentioned below denotes the administration's abbreviation 'XX-GL', 'NO-BN', 'FR-SR' etc.
	%ADMPATH% denotes the absolute path to the administration's home folder.
	DNA files for %ADM% *must* reside in the %ADMPATH%\DNA folder, since this is our bootstrap files location.
=========================================================================================================-->
	<!-- Note: If French user A has made fileA.dwg and this file is opened by German user B, then  -->
	<!-- the folders addressed by the DNA in fileA.dwg must address the French 'Adm\xxxx' folders,
	<!-- otherwise the German ones will be used. -->
	<DnaMappingFolder>..\NO-BN\DNA\DnaMappings</DnaMappingFolder>
	
	<SwitchGeometryPath>..\NO-BN\DNA\Switches\NO-BN-2023.a-SwitchGeometries.xml</SwitchGeometryPath>
	<SymbolLibraryPath>..\NO-BN\2D\NO-BN-2023.a-2D.dwg</SymbolLibraryPath>
	<ObjectThumbnailsPath>..\NO-BN\2D\NO-BN-2023.a-SymbolThumbnails.rc</ObjectThumbnailsPath>

	<!-- Note: The Geometry3DLibraryFolder element points to folders that may contain drawings in any format  -->
	<!-- recognized by RailCOMPLETE (DWG, RVT, IFC, DGN etc). -->
	<!-- The default filename extension is .dwg or user selected to another filetype, e.g. .ifc,  -->

	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\FE</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\KO</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\KU</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\EH</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\EL</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\SA</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\TE</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2023.a\Skilt</Geometry3DLibraryFolder>

	<!-- TODO: 2021 NO-BN references are to be removed once the 2023 folders are completed -->
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\FE</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\KU</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\KO</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\EH</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\SA</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\TE</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\EL</Geometry3DLibraryFolder>
	<Geometry3DLibraryFolder>..\NO-BN\3D\STD-2021.a\Skilt</Geometry3DLibraryFolder>

	<!-- 3D layer mappings - these allow the RC-Export3D command to alter source object's 3D geometry layer definitions when exporting 3D geometries: -->
	<Geometry3DLayerMappingFolder>..\NO-BN\3D\LayerMappings</Geometry3DLayerMappingFolder>

	<!-- Administration-specific resources (the general entries are stated in the core sw startup.xml file): -->
	<!-- FAQ entries reference images in <Image>folderSpec\imageFileName.png</Image>, %ADMPATH% is home folder. -->
	<FaqPath>..\..\FAQ\general-faq.xml</FaqPath>
	<FaqPath>..\NO-BN\FAQ\NO-BN-2023.a-faq.xml</FaqPath>
	<WebPagesPath>..\..\WebLinks\general-WebLinks.xml</WebPagesPath>
	<WebPagesPath>..\NO-BN\WebLinks\NO-BN-2023.a-WebLinks.xml</WebPagesPath>
	<TutorialsFolder>..\NO-BN\Tutorials</TutorialsFolder>
	<LuaTooltipPagesFolder>..\NO-BN\Lua\LuaTooltipPages</LuaTooltipPagesFolder>
	<LuaTooltipImagesPath>..\NO-BN\Lua\LuaTooltipPages\TooltipImages\TooltipImages.xaml</LuaTooltipImagesPath>
		


<!--========================================================================================================
	Default settings for RC commands
=========================================================================================================-->
	<DefaultSettingsForCommands>
		<DefaultTrainDimensions>
			<CarWidth>3.40</CarWidth>
			<AxleSeparation>18.0</AxleSeparation>
			<AxleCount>2</AxleCount>
			<NoseLength>3.0</NoseLength>
			<TailLength>3.0</TailLength>
			<CarCount>1</CarCount>
			<CarSeparation>1.0</CarSeparation>
		</DefaultTrainDimensions>
		<DefaultSightingSettings>
			<GeneralSettings>
				<SightingMethod>Region</SightingMethod>
				<StopAtDistance>10</StopAtDistance>
			</GeneralSettings>
			<CadSettings>
				<Color>ByLayer</Color>
				<Transparency>ByLayer</Transparency>
				<Linetype>ByLayer</Linetype>
				<GlobalWidth>0</GlobalWidth>
			</CadSettings>
			<TrainSettings>
				<TrainWindowTopEdge>3.2</TrainWindowTopEdge>
				<TrainWindowBottomEdge>2.9</TrainWindowBottomEdge>
				<TrainWindowLeftEdge>-0.3</TrainWindowLeftEdge>
				<TrainWindowRightEdge>0.3</TrainWindowRightEdge>
			</TrainSettings>
			<SightingPrecision>
			<StepLength>1.0</StepLength>
			</SightingPrecision>
		</DefaultSightingSettings>
	</DefaultSettingsForCommands>



<!--========================================================================================================
	Earthing transient symbol
=========================================================================================================-->
	<!-- This element gives the block name which will be used as a transient symbol at each end of a transient  -->
	<!-- earthing connection line, as created from the Show Earthing command. -->
	<!-- Since most users will work in Geo mode, it is advised to point to the Geographic block version. If they are created using  -->
	<!-- the LISP agent standard code, then both of -Schematic and -Geographic symbol versions will be available.  -->
	<DefaultEarthingBlockName>NO-BN-2D-JBTEH_TEC-TRANSIENT-EARTHING-CONNECTOR-Geographic</DefaultEarthingBlockName>



<!--========================================================================================================
	3D stuff
=========================================================================================================-->
	<!-- This element gives the block name which will be inserted when the 3D export command fails to locate the asked-for 3D geometry. -->
	<!-- RailCOMPLETE searches according to current 3D library search list. -->
	<!-- If no filetype is given, then both DWG and IFC geometry will be searched for. -->
	
	<DefaultUnresolved3DGeometryFileName>NO-BN-3D-FE-DIV-UKJENT</DefaultUnresolved3DGeometryFileName>



<!--========================================================================================================
  AutoCAD drawing settings
=========================================================================================================-->
	<Units>
		<LinearUnit Precision="3">Decimal</LinearUnit >
		<AngularUnit Precision="3" Clockwise="false">Decimal Degrees</AngularUnit>
		<InsertionScaleUnit>Meters</InsertionScaleUnit>
		<LightingUnits>International</LightingUnits>
	</Units>



<!--========================================================================================================
	Text Styles, Fonts, Color Tables etc
=========================================================================================================-->
	<!--AutoCAD fonts, color tables etc, to be found by AutoCAD during runtime. The RailCOMPLETE user can
    add more AutpCAD resources (fonts, shapes, color tables etc) to the support folder(s) that are mentioned
	below. 
	
	To set a search path in AutoCAD, use command OPTION /Files /Support File Search Path /Add
   
        %appdata%\Autodesk\ApplicationPlugins\RC.bundle\Adm\XX-YY\DNA\AutoCAD

    The administration might also need a CAD system color table .CTB file.
	The same font should be used for 2D symbols, see LISP source folder ...\2D\_SRC\Fonts.

    AutoCAD uses REGISTRY to store this information, so the user must terminate and restart AutoCAD in order 
	for a new search folder definition to take effect.
	-->

	<!-- Initialized to %ADMPATH%\AutoCAD -->
	<!-- Cardinality: 0.."Inf" -->
	<!-- ADD new if it exists and is flawless. If new exists but is flawed, then flash a message and ignore new. -->
	<AutocadSupportFileSearchFolder>%appdata%\Autodesk\ApplicationPlugins\RC.bundle\Adm\NO-BN\AutoCAD</AutocadSupportFileSearchFolder>  

	<!-- https://trv.banenor.no/wiki/TRV:00255 Fonter -->
	<DefaultFont>iso3098</DefaultFont>
	<DefaultStyle>iso</DefaultStyle>
	<DefaultHeight>1.0</DefaultHeight>



<!--========================================================================================================
    Include files
=========================================================================================================-->
<!-- Style Definitions -->
<xpp:expand href="NO-BN-StyleDefinitions.xml"/>

<!-- Civil3D / IFC Property sets -->
<xpp:expand href="NO-BN-PsetIsyBeskrivelse.xml"/>
<xpp:expand href="NO-BN-PsetBaneNOR.xml"/>
<xpp:expand href="NO-BN-PsetTittelfelt.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_KU.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_KO.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_EH.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_SA.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_EL.xml"/>
<xpp:expand href="NO-BN-PsetFDVBaneData_TE.xml"/>
                  
<!-- ShowLayers, gauges, relations -->
<xpp:expand href="NO-BN-ShowLayers.xml"/>
<xpp:expand href="NO-BN-GaugeHalfProfiles.xml"/>
<xpp:expand href="NO-BN-Relations.xml"/>

<!-- XPPq macros and Property Manager setup -->
<xpp:expand href="NO-BN-StandardProperties.xml"/>

<!-- XPPq macros for import and export scripts - interface to other railway data exchange formats -->
<!-- Note: Thes Eulynx identifiers and function calls need a special version of RC. Lots of RC-ValidateDna errors will appear if not. -->
<!-- TODO: Remove it or complete it: -->
<xpp:expand href="NO-BN-Eulynx.xml"/>

<!-- Lua expressions -->
<xpp:expand href="NO-BN-General-Lua.xml"/>
<xpp:expand href="NO-BN-National-Lua.xml"/>
<xpp:expand href="NO-BN-Foulingpoint.xml"/>
<xpp:expand href="NO-BN-PositionToolSettings.xml"/>
<xpp:expand href="NO-BN-ModelChecks.xml"/>

<!-- Generic objects -->
<xpp:expand href="NO-BN-Labels.xml"/>
<xpp:expand href="NO-BN-Tables.xml"/>
<xpp:expand href="NO-BN-CommonObjects.xml"/>

<!-- Objects per railway discipline -->
<xpp:expand href="NO-BN-CivilWorks.xml"/>

<xpp:expand href="NO-BN-TrackConnections.xml"/>
<xpp:expand href="NO-BN-TrackAndWaysideObjects.xml"/>

<xpp:expand href="NO-BN-Earthing.xml"/>

<xpp:expand href="NO-BN-OcsWireSystem.xml"/>
<xpp:expand href="NO-BN-OcsPoles.xml"/>
<xpp:expand href="NO-BN-OcsCantilevers.xml"/>
<xpp:expand href="NO-BN-OcsSwitchesAndTransformers.xml"/>
<xpp:expand href="NO-BN-OcsVariousObjects.xml"/>

<xpp:expand href="NO-BN-SignallingObjects.xml"/>
<xpp:expand href="NO-BN-Balises.xml"/>
<xpp:expand href="NO-BN-Signals.xml"/>
<xpp:expand href="NO-BN-SignalSighting.xml"/>

<xpp:expand href="NO-BN-Telecom.xml"/>

<xpp:expand href="NO-BN-LowPower.xml"/>

<xpp:expand href="NO-BN-BoardsAndPoles.xml"/>


<!--========================================================================================================
    End of file 
=========================================================================================================-->
</RailwayObjectTypeDefinitions>
