<!--========================================================================================================

    NO-BN-AlignmentInfo.xaml
	
	XAML / Lua for custom tooltip in RailCOMPLETE(r)

	Copyright (c) 2015-2024 Railcomplete AS, Norway, NO916118503
	
=========================================================================================================-->
<UserControl 
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:local="clr-namespace:RailCOMPLETE.Model.ObjectBrowser;assembly=RailCOMPLETE.Model"
xmlns:system="clr-namespace:System;assembly=mscorlib">

	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/RailCOMPLETE.Common;component/WPFStyles/StylesResources.xaml"/>
				<ResourceDictionary Source="/RailCOMPLETE.Common;component/WPFStyles/PathScaling.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
			<local:LuaConverter x:Key="LuaConverter"/>
			<local:XAMLAngleConverter x:Key="XAMLAngleConverter"/>
			<local:NullVisibilityConverter x:Key="NullVisibilityConverter"/>
		</ResourceDictionary>
	</UserControl.Resources>

	<Border Padding="10" CornerRadius="20" >
		<Border.Background>
			<SolidColorBrush Color="White" Opacity=".9" />
		</Border.Background>
		<DockPanel>
			<StackPanel>
				<StackPanel.DataContext>
					<Binding Path="SelectedObject" Converter="{StaticResource LuaConverter}">
						<Binding.ConverterParameter>
							<system:String xml:space="preserve">
								ai = getAlignmentInfo(_position) -- ai = CAD cursor info
								function isNan(x) return (x) ~= (x) end
								all = {}
								all["AlignmentName"] = ai.AlignmentName
								all["Mileage"] = string.format("%11.6f",ai.Mileage/1000)
								refIdString = ai.ReferenceAlignmentId
								if refIdString ~= nil then
									refAi = getAlignmentInfo(refIdString,cursorPosition)
									all["RefAlignmentName"] = refAi.AlignmentName
									all["RefMileage"] = string.format("%9.4f",refAi.Mileage/1000)
								else
									all["RefAlignmentName"]="(Error in ref. alignment name)"
									all["RefMileage"]="(Error in ref. alignment mileage)"
								end

								if ai.Segment ~= nil then
									if ai.Segment.Type =="Straight" then 
										hText="HOR: Rettspor"
									elseif ai.Segment.Type =="Curve" then 
										hText="HOR: Sirkelkurve"
									elseif ai.Segment.Type =="Clothoid"then 
										hText="HOR: Klotoide"
									end
								else
									hText="(undefined)"
								end
								all["HorizontalSegmentType"] = hText

								nvv = ai.NearestVerticalVertex
								if nvv == nil then 
									vText="VERT: (no data)"
								else 
									vText2=""
									if nvv.type =="None" then
										--Usually the start/end PVIs, but this may also occur inside alignment if gradients before/after PVI are identical
										gr = (ai.elevation - nvv.elevation) / (ai.mileage - nvv.mileage) * 1000 --per mille
										if gr &gt; 5e-3 then 
											vText="VERT: Stigning"
										elseif gr &lt; -5e-3 then
											vText="VERT: Fall"
										else
											vText="VERT: Flatt"
										end
									else
										-- Crest or Sag
										vcsm = (nvv.VerticalCurveStart.Mileage == nil) and nvv.Mileage or nvv.VerticalCurveStart.Mileage
										vcsg = (nvv.VerticalCurveStart.Gradient == NaN) and nvv.Gradient or (nvv.VerticalCurveStart.Gradient)
										vcem = (nvv.VerticalCurveEnd.Mileage == nil) and nvv.Mileage or nvv.VerticalCurveEnd.Mileage
										vceg = (nvv.VerticalCurveEnd.Gradient == NaN) and nvv.Gradient or (nvv.VerticalCurveEnd.Gradient)
										if (ai.Mileage &lt;= vcsm) then 
											if vcsg &gt; 5e-3 then 
												vText="VERT: Stigning"
											elseif vcsg &lt; -5e-3 then
												vText="VERT: Fall"
											else
												vText="VERT: Flatt"
											end
										elseif (ai.Mileage &gt; vcsm) and (ai.Mileage &lt;= vcem) then
											if nvv.Variant =="ParaCurve" then
												parameterType="p.len"
											else
												parameterType="radius"
											end
											if vcsg &gt; vceg then
												vText="VERT: HBP, "..parameterType
												vr = tonumber(nvv.Radius) * 1.0
												vText2=" m"
											elseif vcsg &lt; vceg then 
												vText="VERT: LBP, "..parameterType
												vr = tonumber(nvv.Radius) * 1.0
												vText2=" m"
											else 
												vText="VERT: (Bad transition data)"
											end
										elseif ai.Mileage &gt; vcem then
											if vceg &gt; 5e-3 then
												vText="VERT: Stigning"
											elseif vceg &lt; -5e-3 then
												vText="VERT: Fall"
											else
												vText="VERT: Flatt"
											end
										else
											vText="VERT: (Bad mileage)"
										end
									end
								end
								all["VerticalSegmentType"] = vText
								all["VerticalCurveRadius"] = vr or "-"
								all["VerticalCurveRadiusUnit"] = vText2
								all["CurveRadius"] = ai.CurveRadius or "-"
								if isNan(ai.Elevation) then
									ee = 0.0
									gg = 0.0
								else
									ee = tonumber(ai.Elevation) * 1.0
									gg = tonumber(ai.Gradient) * 1.0
								end
								all["Elevation"] = ee
								all["Gradient"] = gg
								if isNan(ai.Cant) then
									cc = 0.0
									cg = 0.0
									cgs = 0.0
								else
									cc = tonumber(ai.Cant) * 1.0
									cg = isNan(ai.CantGradient) and 0.0 or ai.CantGradient --Undefined in Ramp Begin and Ramp End points if tangent segments
									if isNan(ai.Speed) then
										cgs = 0.0
									else
										cgs = cg * tonumber(ai.Speed) / 3.6
									end
								end
								all["Cant"] = cc
								all["CantGradient"] = (cg == 0) and "0" or string.format("%s1:%.0f",(cg &gt; 0) and "" or "-",(0.5 + 1000/math.abs(cg)))


								if isNan(cc) then
									all["TrainRotation"] = 0.0
								else
									-- Exaggerated angle, max 90 decimal degrees:
									ang = math.min(90.0, 5.0*math.deg(math.asin(cc/1500.0)))
									if ai.CantRotation =="CW" then 
										all["TrainRotation"] = -ang
									elseif ai.CantRotation =="CCW" then 
										all["TrainRotation"] = ang
									else
										all["TrainRotation"] = 0 --(Bad cant rotation)
									end
								end

								all["CantRotation"] = ai.CantRotation

								all["Speed"] = isNan(ai.Speed) and "-" or tonumber(ai.Speed) * 1.0
								CantDeficiency = isNan(ai.Speed) and "-" or ((ai.Speed/0.291)^2 / ai.CurveRadius - cc)

								--Ref Bane NOR TRV Overbygning Prosjektering Sporets trasé - ch. 3.1 Dimensjonerende parametre - Nye baner og linjeomlegginger"
								ImaxNew = ai.CurveRadius &gt; 600.0 and 130 or 100 --mm cant deficiency
								all["ImaxNew"] = ImaxNew
								all["CantDeficiency"] = CantDeficiency
								VmaxNew = 0.291 * math.sqrt(ai.CurveRadius * (cc + ImaxNew))
								all["VmaxNew"] = VmaxNew

								--Ref Bane NOR TRV Overbygning Prosjektering Sporets trasé - ch. 3.2 "Dimensjonerende parameter - eksisterende baner"
								ImaxExisting = ai.CurveRadius &gt; 600 and 150 or (ai.CurveRadius &gt; 290 and 130 or 100) --mm cant deficiency
								all["ImaxExisting"] = ImaxExisting
								all["CantDeficiencyExisting"] = CantDeficiencyExisting
								VmaxExisting = 0.291 * math.sqrt(ai.CurveRadius * (cc + ImaxExisting))
								all["VmaxExisting"] = VmaxExisting

								--Ref Bane NOR TRV Overbygning Prosjektering Sporets trasé - ch. 3.2.1 "Dimensjonerende parameter for plussmateriell"
								ImaxPlus = ai.CurveRadius &gt; 290 and 153 or (ai.CurveRadius &gt; 250 and (0.575*CurveRadius-13.75) or 130) --mm cant deficiency
								all["ImaxPlus"] = ImaxPlus
								all["CantDeficiencyPlus"] = CantDeficiencyPlus
								VmaxPlus = 0.291 * math.sqrt(ai.CurveRadius * (cc + ImaxPlus))
								all["VmaxPlus"] = VmaxPlus

								return all
							</system:String>
						</Binding.ConverterParameter>
					</Binding>
				</StackPanel.DataContext>
			  
				<DockPanel>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Km. " FontWeight="bold"/>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="{Binding [RefMileage] , StringFormat=N3}" FontWeight="bold"/>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text=" (ref.) " FontWeight="bold"/>
				</DockPanel>
				<TextBlock Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [RefAlignmentName]}"/>

				<TextBlock Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=""/> 
				<DockPanel>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Pr." FontWeight="bold"/>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="{Binding [Mileage] , StringFormat=N6}" FontWeight="bold"/>
					<TextBlock Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text=" (eget)" FontWeight="bold"/>
				</DockPanel>
				<TextBlock Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [AlignmentName]}"/> 
				
				<TextBlock Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=""/> 
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"></ColumnDefinition>  
						<ColumnDefinition Width="*"></ColumnDefinition>  
						<ColumnDefinition Width="*"></ColumnDefinition>  
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition> 
						<RowDefinition></RowDefinition> 
					</Grid.RowDefinitions>  
			   
					<TextBlock Grid.Row="0" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{ Binding [HorizontalSegmentType] }"/>
					<TextBlock Grid.Row="0" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [CurveRadius], StringFormat=N1}"/>
					<TextBlock Grid.Row="0" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" m" />

					<TextBlock Grid.Row="1" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{ Binding [VerticalSegmentType] }"/>
					<TextBlock Grid.Row="1" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [VerticalCurveRadius], StringFormat=N0}"/>
					<TextBlock Grid.Row="1" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{ Binding [VerticalCurveRadiusUnit] }" />

					<TextBlock Grid.Row="2" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Høyde" />
					<TextBlock Grid.Row="2" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" DockPanel.Dock="Right" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [Elevation], StringFormat=N3}"/> 
					<TextBlock Grid.Row="2" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" moh." />

					<TextBlock Grid.Row="3" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Gradient" />
					<TextBlock Grid.Row="3" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" DockPanel.Dock="Right" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [Gradient], StringFormat=N2}"/>
					<TextBlock Grid.Row="3" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" ‰" />

					<TextBlock Grid.Row="4" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Overhøyde" />
					<TextBlock Grid.Row="4" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="Black" VerticalAlignment="Center" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [Cant], StringFormat=N1}" />
					<TextBlock Grid.Row="4" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm" />
			 
					<TextBlock Grid.Row="5" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Rampestigning" />
					<TextBlock Grid.Row="5" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [CantGradient], StringFormat=N3 }" />
					<TextBlock Grid.Row="5" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="" />

					<TextBlock Grid.Row="6" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Rampestign.hast." />
					<TextBlock Grid.Row="6" Grid.Column="1" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="Black" FontSize="14" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [CantGradientSpeed], StringFormat=N3 }" />
					<TextBlock Grid.Row="6" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm/s" />
				</Grid>
				<StackPanel Orientation="Horizontal" Visibility="{Binding [Cant], Converter={StaticResource NullVisibilityConverter} }">
					<Rectangle HorizontalAlignment="Left" Margin="10" Height="50" Width="50" Fill="{StaticResource train}">
						<Rectangle.LayoutTransform>
							<RotateTransform Angle="{Binding [TrainRotation], Converter={StaticResource XAMLAngleConverter}}"/>
						</Rectangle.LayoutTransform>
					</Rectangle>
					<TextBlock Foreground="Black" VerticalAlignment="Center" FontSize="15" 
						MaxWidth="300" TextWrapping="wrap" Text="{Binding [CantRotation]}" Visibility="{Binding [Cant], Converter={StaticResource NullVisibilityConverter} }"/>
			   
				</StackPanel>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"></ColumnDefinition>  
						<ColumnDefinition Width="*"></ColumnDefinition>  
						<ColumnDefinition Width="*"></ColumnDefinition>  
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>  
						<RowDefinition></RowDefinition> 
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  

						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  

						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition> 

						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition>  
						<RowDefinition></RowDefinition> 
					</Grid.RowDefinitions>  

					<TextBlock Grid.Row="0" Grid.Column="0" Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Hastigheter" FontWeight="Bold" />

					<TextBlock Grid.Row="1" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="V: Design speed"/>
					<TextBlock Grid.Row="1" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [Speed] , StringFormat=N1 }"/>
					<TextBlock Grid.Row="1" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" km/h" />

					<TextBlock Grid.Row="2" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="I: Mangl. oh." />
					<TextBlock Grid.Row="2" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [CantDeficiency], StringFormat=N0 }"/>
					<TextBlock Grid.Row="2" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm" />

					<TextBlock Grid.Row="3" Grid.Column="0" Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Nye baner" FontWeight="Bold" />

					<TextBlock Grid.Row="4" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Imax" />
					<TextBlock Grid.Row="4" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [ImaxNew], StringFormat=N0 }"/>
					<TextBlock Grid.Row="4" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm" />

					<TextBlock Grid.Row="5" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Vmax" />
					<TextBlock Grid.Row="5" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [VmaxNew], StringFormat=N1 }"/>
					<TextBlock Grid.Row="5" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" km/h" />

					<TextBlock Grid.Row="6" Grid.Column="0" Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Eks. baner" FontWeight="Bold" />
					
					<TextBlock Grid.Row="7" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Imax" />
					<TextBlock Grid.Row="7" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [ImaxExisting], StringFormat=N0 }" />
					<TextBlock Grid.Row="7" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm" />

					<TextBlock Grid.Row="8" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Vmax" />
					<TextBlock Grid.Row="8" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [VmaxExisting], StringFormat=N1 }"/>
					<TextBlock Grid.Row="8" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" km/h" />

					<TextBlock Grid.Row="9" Grid.Column="0" Foreground="Black" FontSize="16" MaxWidth="300" TextWrapping="wrap" Text="Plussmateriell" FontWeight="Bold" />
					
					<TextBlock Grid.Row="10" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Imax" />
					<TextBlock Grid.Row="10" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [ImaxPlus], StringFormat=N0 }" />
					<TextBlock Grid.Row="10" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" mm" />

					<TextBlock Grid.Row="11" Grid.Column="0" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="Vmax" />
					<TextBlock Grid.Row="11" Grid.Column="1" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text="{Binding [VmaxPlus], StringFormat=N1 }"/>
					<TextBlock Grid.Row="11" Grid.Column="2" Foreground="Black" FontSize="14" MaxWidth="300" TextWrapping="wrap" Text=" km/h" />
				</Grid>
			</StackPanel>
		</DockPanel>
	</Border>
</UserControl>
