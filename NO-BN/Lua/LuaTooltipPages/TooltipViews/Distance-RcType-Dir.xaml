<UserControl 
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:local="clr-namespace:RailCOMPLETE.Model.ObjectBrowser;assembly=RailCOMPLETE.Model"
xmlns:system="clr-namespace:System;assembly=mscorlib"
>
	<UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/RailCOMPLETE.Common;component/WPFStyles/StylesResources.xaml"/>
                <ResourceDictionary Source="/RailCOMPLETE.Common;component/WPFStyles/PathScaling.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
			<local:LuaConverter x:Key="LuaConverter"/>
			<local:NullVisibilityConverter x:Key="NullVisibilityConverter"/>
        </ResourceDictionary>
    </UserControl.Resources>
	<Border Padding = "10" CornerRadius="20" >
		<Border.Background>
			<SolidColorBrush Color="White" Opacity="0.9" />
		</Border.Background>
		<Grid>
			<DockPanel>
				<StackPanel>
					<TextBlock Foreground="Black" FontSize="15" MaxWidth="500" TextWrapping="wrap">
						<TextBlock.Text>
							<Binding Path="SelectedObject"
								 Converter="{StaticResource LuaConverter}">
								<Binding.ConverterParameter>
									<system:String xml:space="preserve"> 
objType = RCType
objDir = dir
if objDir == nil then return "(object type '"..RcType.."' has no direction)" end

prevDownObjectsIDs = {}
downObj = getDownObject(objType,_position)
while true do
	if downObj == nil then break end
	if (prevDownObjectsIDs[downObj.id] ~= nil) then 
		downObj = nil
		break 
	end
	if downObj.dir == objDir then 
		if RCType == "SA-SIG Signal" then 
			if Hovedsignal:match("Hs[2-3]") and downObj.Hovedsignal:match("Hs[2-3]") then break 
			elseif (Hovedsignal == "-" and Dvergsignal == "Ja") and (downObj.Hovedsignal == "-" and downObj.Dvergsignal == "Ja") then break 
			end
		else
			break
		end
	end
	prevDownObjectsIDs[downObj.id] = true
	downObj = downObj:getDownObject(objType)
end

prevUpObjectsIDs = {}
upObj = getUpObject(objType,_position)
while true do
	if upObj == nil then break end
	if (prevUpObjectsIDs[upObj.id] ~= nil) then
		upObj = nil
		break 
	end
	if upObj.dir == objDir then 
		if RCType == "SA-SIG Signal" then 
			if Hovedsignal:match("Hs[2-3]") and upObj.Hovedsignal:match("Hs[2-3]") then break 
			elseif (Hovedsignal == "-" and Dvergsignal == "Ja") and (upObj.Hovedsignal == "-" and upObj.Dvergsignal == "Ja") then break 
			end
		else
			break
		end
	end
	prevUpObjectsIDs[upObj.id] = true
	upObj = upObj:getUpObject(objType)
end

downDistance = downObj ~= nil and distance(downObj,_position) or 0
upDistance = upObj ~= nil and distance(upObj,_position) or 0

t1 = string.format("Distance - match type and direction\n[%s], %s\n\n",objType,dir)
if downObj ~= nil then
	t2 = string.format("%s: %.03f m\n%s\nKm %.03f, %s",
		objDir == "down" and "Next at lower km" or "Previous at lower km", 
		downDistance, RC__identify(downObj), downObj.referenceMileage, RC__identify(downObj.Alignment))
else
	t2 = ""
end
t3 = (downObj ~= nil and upObj ~= nil) and "\n\n" or ""
if upObj ~= nil then
	t4 = string.format("%s: %.03f m\n%s\nKm %.03f, %s", 
		objDir == "up" and "Next at higher km" or "Previous at higher km", 
		upDistance, RC__identify(upObj), upObj.referenceMileage, RC__identify(upObj.Alignment))
else
	t4 = ""
end
if downObj ~= nil and upObj ~= nil then 
	t5 = string.format("\n\nSum = %.03f m", downDistance + upDistance)
else
	t5 = ""
end
return t1..t2..t3..t4..t5
										</system:String>
								</Binding.ConverterParameter>
							</Binding>
						</TextBlock.Text>
					</TextBlock>
				</StackPanel>
			</DockPanel>
		</Grid>
	</Border>
</UserControl>
