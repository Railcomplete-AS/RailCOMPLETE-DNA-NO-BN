<?xml version="1.0" encoding="utf-16"?>
<TableLayoutViewModel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Title>Sporvekseltabell (detaljert) - T_Y_5209677_Signal-Kongsvinger</Title>
  <IncludeTitle>true</IncludeTitle>
  <ShowInvisibleObjects>false</ShowInvisibleObjects>
  <OMFilter />
  <OMFilterList />
  <EnableLuaFilter>true</EnableLuaFilter>
  <LuaFilter>RcType == "KO-SPV Sporveksel"</LuaFilter>
  <UseDataSetFilter>false</UseDataSetFilter>
  <EnableCustomSettings>true</EnableCustomSettings>
  <TitleTextHeight>10</TitleTextHeight>
  <HeaderTextHeight>5</HeaderTextHeight>
  <DataTextHeight>3</DataTextHeight>
  <VerticalCellMargin>1.5</VerticalCellMargin>
  <HorizontalCellMargin>1.5</HorizontalCellMargin>
  <BlockScale>1</BlockScale>
  <MinRowHeight>3</MinRowHeight>
  <EnableWrap>false</EnableWrap>
  <WrapDepth>0</WrapDepth>
  <WrapSpacing>0</WrapSpacing>
  <WrapDirection>Right</WrapDirection>
  <RepeatHeaders>false</RepeatHeaders>
  <VerticalNumbering>
    <Enabled>false</Enabled>
    <IsVertical>true</IsVertical>
    <Location>Left</Location>
    <NumberFormat>Numbers</NumberFormat>
    <TextHeight>2</TextHeight>
    <HideBorders>true</HideBorders>
    <Alignment>MiddleCenter</Alignment>
    <NumberingTitle>Vertical numbering</NumberingTitle>
  </VerticalNumbering>
  <HorizontalNumbering>
    <Enabled>false</Enabled>
    <IsVertical>false</IsVertical>
    <Location>Bottom</Location>
    <NumberFormat>Numbers</NumberFormat>
    <TextHeight>2</TextHeight>
    <HideBorders>true</HideBorders>
    <Alignment>MiddleCenter</Alignment>
    <NumberingTitle>Horizontal numbering</NumberingTitle>
  </HorizontalNumbering>
  <TableFormat>Standard</TableFormat>
  <Font>RC-STANDARD</Font>
  <Columns>
    <ColumnSpecification>
      <Guid>11312c48-34c1-4926-a944-5e3db2acc053</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Navn" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>Name</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>9f4e777c-d7ae-41f0-b833-5a41333c6700</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Objekt-ID" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>Tag</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>71b321ec-4bc3-493d-974b-2b01236d720c</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Spv. nr." />
      </Headers>
      <Width>20</Width>
      <Sort>Ascending</Sort>
      <Alignment>MiddleCenter</Alignment>
      <Data>code</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>4471f8ed-9d27-49f8-8268-a6ec892ffc35</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Variant" />
      </Headers>
      <Width>80</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>Variant</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>f666b8a7-c054-4d7c-b430-7af861b9e669</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Retning" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>if (Dir == "up") then
    return "Stigende Km"
else
    return "Synkende Km"
end</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>51712f0c-3731-4403-aff2-74ba7c027bca</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Avvik" />
      </Headers>
      <Width>30</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>if (SwitchGeometry == "left") then 
	return "V"
elseif (SwitchGeometry == "right") then
	return "H"
else
	return "???",_warning
end	</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>d762837b-7200-46a2-8e90-ca7b8d257ccb</Guid>
      <Headers>
        <Header Name="Sporveksel" />
        <Header Name="Symbol" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>getInvertedBlockImage()</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>ba4ca159-9a7b-49a0-a5c0-8724928c04ec</Guid>
      <Headers>
        <Header Name="Signalanlegg" />
        <Header Name="Styring og kontroll" />
      </Headers>
      <Width>80</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>SwitchControlAndLockingEnumTable = 
      {
	      Rm = {	  
	      	"Remote controlled, machine locked",
	      	"Sentralstilt, maskinlåst"
	      },
	      Rl = {
	      	"Remote controlled, keylocked for left switch leg train movements", 
	      	"Sentralstilt, kontrollåst V"
	      },
	      Rr = {	
	      	"Sentralstilt, kontrollåst H",
	      	"Remote controlled, keylocked for right switch leg train movements"
	      },
	      Rb = {
	      	"Remote controlled, keylocked for both right and left switch leg train movements",
	      	"Sentralstilt, kontrollåst HV"
	      },
	      Pl = {
	      	"Pushbutton controlled, keylocked for left switch leg train movements",
	      	"Trykknapp, kontrollåst V"
	      },
	      Pr = {
	      	"Pushbutton controlled, keylocked for right switch leg train movements",
	      	"Trykknapp, kontrollåst H"
	      },
	      Pb = {
	      	"Pushbutton controlled, keylocked for both right and left switch leg train movements",
	      	"Trykknapp, kontrollåst HV"
	      },
	      Pn = {
	      	"Pushbutton controlled, not interlocked",
	      	"Trykknapp, uforriglet"
	      },
	      Hl = {
	      	"Hand operated (hand thrown), keylocked for left switch leg train movements",
	      	"Kastelodd, kontrollåst V"
	      },
	      Hr = {
	      	"Hand operated (hand thrown), keylocked for right switch leg train movements",
	      	"Kastelodd, kontrollåst H"
	      },
	      Hb = {
	      	"Hand operated (hand thrown), keylocked for both right and left switch leg train movements (one at a time)",
	      	"Kastelodd, kontrollåst HV"
	      },
	      Hn = {
	      	"Hand operated (hand thrown), not interlocked",
	      	"Kastelodd, uforriglet"
	      }
       }

culture = 2 --Norwegian
return SwitchControlAndLockingEnumTable[SwitchControlAndLocking][culture]</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>fa730a31-6e44-4088-bba8-5800add006c9</Guid>
      <Headers>
        <Header Name="Signalanlegg" />
        <Header Name="Koblet med" />
      </Headers>
      <Width>30</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>
						local r = Relations["Er koblet med sporveksel"]
						if getCollectionLength(r) == 0 then
							return "-"
						else
							return r[0].code
						end
					</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>10272f0b-a413-49f6-bd6a-b520ea345d97</Guid>
      <Headers>
        <Header Name="Referansespor" />
        <Header Name="Km SS (i ref. spor)" />
      </Headers>
      <Width>35</Width>
      <Sort>Ascending</Sort>
      <Alignment>MiddleCenter</Alignment>
      <Data>RC__toKm(ReferenceMileage,3)</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>e737d99a-ab83-4ccf-905b-b8aa9c0f3503</Guid>
      <Headers>
        <Header Name="Referansespor" />
        <Header Name="Km Mid" />
      </Headers>
      <Width>35</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>RC__toKm(NOBN_trk_getFoulingPointReferenceMileage(getObjectFromId(id)),3)</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>854751e2-f04e-4498-8ec9-1e4c169fe30c</Guid>
      <Headers>
        <Header Name="Referansespor" />
        <Header Name="Ref. spor" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>ReferenceAlignment.code</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>2c751b6d-9494-4316-8a01-1f0fecc9b396</Guid>
      <Headers>
        <Header Name="Eget spor" />
        <Header Name="PEL SS (i eget spor)" />
      </Headers>
      <Width>35</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>RC__toKm(Mileage,6)</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>d27510a5-48e8-4a25-8eeb-6434fcc8f31b</Guid>
      <Headers>
        <Header Name="Eget spor" />
        <Header Name="PEL Mid" />
      </Headers>
      <Width>35</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>RC__toKm(NOBN_trk_getFoulingPointMileage(),6)</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>5e391291-6606-4394-b065-465f26837190</Guid>
      <Headers>
        <Header Name="Eget spor" />
        <Header Name="Eget spor" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>Alignment.code</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>53cad9b3-26c3-4409-a57f-0a7aa5489538</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Antall drivmaskiner på tunge" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end
	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).ntm</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>0e40c3d7-060b-4ada-a238-fbae9f11c9b2</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Tungemaskiner side av spor" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end
	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).tms</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>358063ad-bcdf-4630-afc8-ece21fb55ffd</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Tungemaskiner type" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end

	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).tmt</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>9d1c5df3-ee27-492f-9809-d73dbaf75501</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Antall drivmaskiner på krysset" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end

	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).nfm</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>c10f5dea-1295-4482-9c85-886c02244d63</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Kryssmaskiner side av spor" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end
	
	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).fms</Data>
    </ColumnSpecification>
    <ColumnSpecification>
      <Guid>a6fa869f-6967-49b5-9c1b-92f205a644f2</Guid>
      <Headers>
        <Header Name="Drivmaskiner" />
        <Header Name="Kryssmaskiner type" />
      </Headers>
      <Width>60</Width>
      <Sort />
      <Alignment>MiddleCenter</Alignment>
      <Data>function analyzePointMachines(sw)
	sw = sw and this
	if sw.RcType ~= "KO-SPV Sporveksel" then 
		return {	ntm="?", tms="?", tmt="?", nfm="?", fms="?", fmt="?" }
	end
	
	pointMachines = Relations["Har sporvekseldrivmaskin"]
	N = getCollectionLength(pointMachines)
	
	--Split between tongue machine and point frog (swing nose) machine for reasonable length pointMachines:
	minDistanceFromStockRailJointToFrog = 20
	
	-- Init:
	nTongueMachines = 0
	nFrogMachines = 0
	nLeftTongueMachines = 0
	nRightTongueMachines = 0
	nLeftFrogMachines = 0
	nRightFrogMachines = 0
	tongueMachineType = ""
	frogMachineType = ""
	
	for i = 0,N-1 do
		if RC__getDistance2D(this,pointMachines[i]) &lt; minDistanceFromStockRailJointToFrog then
			nTongueMachines = nTongueMachines + 1
			if pointMachines[i].LeftSided then nLeftTongueMachines = nLeftTongueMachines + 1 end
			if pointMachines[i].RightSided then nRightTongueMachines = nRightTongueMachines + 1 end
			tongueMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		else
			nFrogMachines = nFrogMachines + 1
			if pointMachines[i].LeftSided then nLeftFrogMachines = nLeftFrogMachines + 1 end
			if pointMachines[i].RightSided then nRightFrogMachines = nRightFrogMachines + 1 end
			frogMachineType = pointMachines[i].Variant -- Overwrite previous, if any
		end	
	end
	
	if nLeftTongueMachines * nRightTongueMachines &gt; 0 then
		tongueMachineSide = "(varierer)"
	elseif nLeftTongueMachines &gt; 0 then
		tongueMachineSide = "Venstre"
	elseif nRightTongueMachines &gt; 0 then
		tongueMachineSide = "Høyre"
	else
		tongueMachineSide = "-"
	end
	
	if nLeftFrogMachines * nRightFrogMachines &gt; 0 then
		frogMachineSide = "(varierer)"
	elseif nLeftFrogMachines &gt; 0 then
		frogMachineSide = "Venstre"
	elseif nRightFrogMachines &gt; 0 then
		frogMachineSide = "Høyre"
	else
		frogMachineSide = "-"
	end
	
	return {	ntm=nTongueMachines, tms=tongueMachineSide, tmt=tongueMachineType, 
				nfm=nFrogMachines, fms=frogMachineSide, fmt=frogMachineType
			}
end

return analyzePointMachines(this).fmt</Data>
    </ColumnSpecification>
  </Columns>
  <SortOrder>
    <string>10272f0b-a413-49f6-bd6a-b520ea345d97</string>
    <string>71b321ec-4bc3-493d-974b-2b01236d720c</string>
  </SortOrder>
</TableLayoutViewModel>